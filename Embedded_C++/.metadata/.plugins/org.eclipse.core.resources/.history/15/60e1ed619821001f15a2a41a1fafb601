
extern "C"
{
	#include "main.h"
}

constexpr uint8_t RCC_IOPA  							= 2; // PORT A
constexpr uint8_t RCC_IOPB  							= 3; // PORT B
constexpr uint8_t RCC_IOPC  							= 4; // PORT C
constexpr uint8_t LED_PIN_NUMBER    					= 2; // LED 1 of RGB
constexpr uint8_t BUTTON_PIN_NUMBER 					= 4; // push Button number 2
constexpr uint8_t OUTPUT_MAX_SPEED_AND_CONFIGURATION    = 0x3;// 50 MHZ

// Classes for Peripherals
class LED
{
public:
	LED(GPIO_TypeDef * PORT, uint8_t pin) : LED_PORT(PORT), pinNumber(pin)
	{
//		initialization();
		if (pinNumber < 8)
		{
			LED_PORT->CRL = (0X3 << 4 * LED_PIN_NUMBER);
		}
		else if (pinNumber > 8 && pinNumber < 16)
		{
			LED_PORT->CRL = (0X3 << 4 * (LED_PIN_NUMBER % 8));
		}

		/* Initialize output data register */
		LED_PORT->ODR = 0x0000;
	}

//	void initialization()
//	{
//
//	}

private:
	GPIO_TypeDef * LED_PORT;
	uint8_t pinNumber;
};

void vRCC_APP2_Enable_Clock(bool enable,uint8_t PORT)
{
	if(enable)
	{
		RCC->APB2ENR |=  (1 << PORT);
	}
	else
	{
		RCC->APB2ENR &= ~(1 << PORT);
	}
}

int main(void)
{
	vRCC_APP2_Enable_Clock(1 , RCC_IOPA);
	vRCC_APP2_Enable_Clock(1 , RCC_IOPB);
	vRCC_APP2_Enable_Clock(1 , RCC_IOPC);
	LED led(GPIOA, PIN_NUMBER);
	GPIOC->CRH = 0x00300000; // pin 13


  while (1)
  {
	  if(!(GPIOB->IDR & (1 << BUTTON_PIN_NUMBER)))
	  {
		  GPIOC->ODR = (1 << 13);
		  GPIOA->ODR = (1 << PIN_NUMBER);
		  for(int i = 0; i < 100000; i++);
	  	  GPIOC->ODR &=~(1 << 13);
		  GPIOA->ODR &=~ (1 << PIN_NUMBER);
		  for(int i = 0; i < 100000; i++);
	  }
	  else
	  {
		  GPIOC->ODR &=~(1 << 13);
		  GPIOA->ODR &=~ (1 << PIN_NUMBER);
		  for(int i = 0; i < 100000; i++);
	  }
  }
}

