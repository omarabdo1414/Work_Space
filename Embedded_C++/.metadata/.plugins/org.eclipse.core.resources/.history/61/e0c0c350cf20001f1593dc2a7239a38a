

#include "main.h"

		//00010000>>4  & 1 = 1
#define SET_BIT(reg,bit)	reg |= (1<<bit)
#define CLEAR_BIT(reg,bit)	reg &=~ (1<<bit)
#define TOGGLE_BIT(reg,bit) reg ^= (1<<bit) //XOR
#define GET_BIT(reg,bit)	(reg>>bit&1)

class Button
{
public:
	Button(GPIO_TypeDef * port, uint16_t pin):button_port(port),btn_pin(pin)
	{
		RCC->APB2ENR |= (1<<3); //Enable Clock for GPIOB
		button_port->CRL = (4<<16); //configure PB4 as input pin
	}
	uint32_t GetButtonStatus()
	{
		return GET_BIT(button_port->IDR ,btn_pin);
	}
private:
	GPIO_TypeDef * button_port;
	uint16_t btn_pin{0};

};

class LED
{
public:
	LED()
	{
		RCC->APB2ENR = (1<<2);
		GPIOA->CRL = (3<<4); //PA1 as an output PIN
	}
	void LED_ON()
	{
		GPIOA->ODR = (1<<1); // Blue Led
	}
	void LED_OFF()
	{
		GPIOA->ODR &= ~(1<<1);
	}
};
struct MotorType
{
	GPIO_TypeDef * motor_pin1_port;
	GPIO_TypeDef * motor_pin2_port;
	GPIO_TypeDef * enable_port;
	uint8_t input_1{0};
	uint8_t input_2{0};
	uint8_t enable{0};
};
class Motor
{
public:
	Motor( MotorType *motor) : m_motor(motor)
	{
		Motor_Stop();
	}

	void Motor_CW()
	{
		SET_BIT(m_motor->motor_pin1_port->ODR, m_motor->input_1);
		CLEAR_BIT(m_motor->motor_pin1_port->ODR ,m_motor->input_2);
		SET_BIT(m_motor->enable_port->ODR, m_motor->enable);

	}
	void Motor_CCW()
	{

		CLEAR_BIT(m_motor->motor_pin1_port->ODR, m_motor->input_1);
		SET_BIT(m_motor->motor_pin1_port->ODR ,m_motor->input_2);
		SET_BIT(m_motor->enable_port->ODR, m_motor->enable);

	}
	void Motor_Stop()
	{
		CLEAR_BIT(m_motor->motor_pin1_port->ODR, m_motor->input_1);
		CLEAR_BIT(m_motor->motor_pin1_port->ODR ,m_motor->input_2);
		CLEAR_BIT(m_motor->enable_port->ODR, m_motor->enable);
	}
private:
	 MotorType *m_motor; //pimpl idiom
};

class Robot{
public:
	Robot(Motor m1, Motor m2) : motor1(m1), motor2(m2)
	{
		motor1.Motor_Stop();
		motor2.Motor_Stop();
	}
	void Forward()
	{
		motor1.Motor_CW();
		motor2.Motor_CCW();
	}
	void Backward()
	{
		motor1.Motor_CCW();
		motor2.Motor_CW();
	}
	void Right()
	{
		motor1.Motor_CW();
		motor2.Motor_Stop();
	}
	void Left()
	{
		motor1.Motor_Stop();
		motor2.Motor_CW();
	}
private:
	Motor motor1;
	Motor motor2;
};

MotorType motor_config
{
	GPIOC,
	GPIOC,
	GPIOC,
	13,
	14,
	15
};

int main(void)
{

	LED blue_led;
	Button button(GPIOB,4);

	RCC->APB2ENR = (1<<4) | (1<<3); //Enable Clock for GPIOC and GPIOB
	GPIOC->CRH = 0x33333333;
	//GPIOB->CRL = (3<<4);

	Motor motor1(&motor_config);


  while (1)
  {
	  if(button.GetButtonStatus()==0)
	  {
		  motor1.Motor_CW();
	  }
	  else{
		  motor1.Motor_CCW();
	  }

  }
  /* USER CODE END 3 */
}
