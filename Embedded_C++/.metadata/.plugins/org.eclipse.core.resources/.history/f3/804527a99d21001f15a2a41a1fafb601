
extern "C"
{
	#include "main.h"
}
#include "mcal.h"

/* TODO */



// Classes for Peripherals
class LED
{
public:
	LED(GPIO_TypeDef * PORT, uint8_t pin) : LED_PORT(PORT), pinNumber(pin)
	{
		initialization();

		/* Initialize output data register */
		LED_PORT->ODR = 0x0000;
	}

	void LedON()
	{
		LED_PORT->ODR |= (1 << pinNumber);
	}

	void LedOFF()
	{
		LED_PORT->ODR &= ~(1 << pinNumber);
	}

	void initialization()
	{
		if (pinNumber < 8)
		{
			LED_PORT->CRL = (OUTPUT_MAX_SPEED_AND_CONFIGURATION << SHIFTED_TIMES * pinNumber);
		}
		else if (pinNumber > 8 && pinNumber < 16)
		{
			LED_PORT->CRH = (OUTPUT_MAX_SPEED_AND_CONFIGURATION << SHIFTED_TIMES * (pinNumber % 8));
		}
	}

private:
	GPIO_TypeDef * LED_PORT;
	uint8_t pinNumber;
};

void vRCC_APP2_Enable_Clock(bool enable,uint8_t PORT)
{
	if(enable)
	{
		RCC->APB2ENR |=  (1 << PORT);
	}
	else
	{
		RCC->APB2ENR &= ~(1 << PORT);
	}
}

void delayMS(unsigned int ticks)
{
	for(unsigned int i = 0; i < ticks; i++);
}

int main(void)
{
	vRCC_APP2_Enable_Clock(1 , RCC_IOPA);
	vRCC_APP2_Enable_Clock(1 , RCC_IOPB);
	vRCC_APP2_Enable_Clock(1 , RCC_IOPC);

	LED led1(GPIOA, LED_PIN_NUMBER_PA2);
	LED led2(GPIOC, LED_PIN_NUMBER_C13);

	Button btn(GPIOB, BUTTON_PIN_NUMBER_BB4);

  while (1)
  {
	  if(!btn.xGetButtonStatus())
	  {
		  led1.LedON();
		  led2.LedON();
		  delayMS(100000);
	  	  led1.LedOFF();
		  led2.LedOFF();
		  delayMS(100000);
	  }
	  else
	  {
		  led1.LedOFF();
		  led2.LedOFF();
	  }
  }
}

