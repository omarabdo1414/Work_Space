
Bush_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000490  08000490  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000490  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000498  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800049c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800049c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013a4  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000742  00000000  00000000  00021414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015d  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001536e  00000000  00000000  00021ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000209a  00000000  00000000  00037213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bb9e  00000000  00000000  000392ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000628  00000000  00000000  000b4e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b5474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000450 	.word	0x08000450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000450 	.word	0x08000450

0800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>:
};

class Button
{
public:
	Button(GPIO_TypeDef * Button, uint8_t pin) : Button_Port(Button), button_pin(pin)
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	79fa      	ldrb	r2, [r7, #7]
 8000164:	711a      	strb	r2, [r3, #4]
	{
		if(pin < 8)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b07      	cmp	r3, #7
 800016a:	d807      	bhi.n	800017c <_ZN6ButtonC1EP12GPIO_TypeDefh+0x30>
		{
			Button_Port->CRL = (INPUT_FLOATING << pin);
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	2104      	movs	r1, #4
 8000174:	fa01 f202 	lsl.w	r2, r1, r2
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	e006      	b.n	800018a <_ZN6ButtonC1EP12GPIO_TypeDefh+0x3e>
		}
		else
		{
			Button_Port->CRH = (INPUT_FLOATING << pin);
 800017c:	79fa      	ldrb	r2, [r7, #7]
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2104      	movs	r1, #4
 8000184:	fa01 f202 	lsl.w	r2, r1, r2
 8000188:	605a      	str	r2, [r3, #4]
		}
	}
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	4618      	mov	r0, r3
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr

08000196 <_ZN6Button17get_Button_StatusEv>:

	Status get_Button_Status()
 8000196:	b480      	push	{r7}
 8000198:	b083      	sub	sp, #12
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
	{
		return static_cast<Status>(Button_Port->IDR & (1 << 4)); //Bit masking
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	689b      	ldr	r3, [r3, #8]
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	f003 0310 	and.w	r3, r3, #16
 80001aa:	b2db      	uxtb	r3, r3
	}
 80001ac:	4618      	mov	r0, r3
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
	...

080001b8 <_ZN10OutputBaseC1Ev>:
private:
	GPIO_TypeDef * Button_Port;
	uint8_t button_pin;
};

class OutputBase
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <_ZN10OutputBaseC1Ev+0x1c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	08000484 	.word	0x08000484

080001d8 <_ZN3LEDC1EP12GPIO_TypeDefh>:
private:
	GPIO_TypeDef * LED_PORT;
	uint8_t led_pin;

public:
	LED(GPIO_TypeDef * Led, uint8_t pin) : LED_PORT(Led), led_pin(pin)
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	4613      	mov	r3, r2
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f7ff ffe5 	bl	80001b8 <_ZN10OutputBaseC1Ev>
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <_ZN3LEDC1EP12GPIO_TypeDefh+0x34>)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	79fa      	ldrb	r2, [r7, #7]
 80001fe:	721a      	strb	r2, [r3, #8]
	{
//		RCC->APB2ENR |= RCC_GPIOC_EN;
	}
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	4618      	mov	r0, r3
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	08000470 	.word	0x08000470

08000210 <_ZN3LED10InitializeEv>:
	void Initialize()
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	{
		GPIOC->CRH = (OUTPUT_MAX_SPEED_50 << PIN_C13);
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <_ZN3LED10InitializeEv+0x1c>)
 800021a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800021e:	605a      	str	r2, [r3, #4]
	}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40011000 	.word	0x40011000

08000230 <_ZN3LED13setStatusHighEv>:

	void setStatusHigh()
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	{
		LED_PORT->ODR = (1 << led_pin);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	7a1b      	ldrb	r3, [r3, #8]
 800023c:	461a      	mov	r2, r3
 800023e:	2301      	movs	r3, #1
 8000240:	fa03 f202 	lsl.w	r2, r3, r2
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	60da      	str	r2, [r3, #12]
	}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <_ZN3LED12setStatusLowEv>:
	void setStatusLow()
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	{
		LED_PORT->ODR &=~ (1 << led_pin);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	68da      	ldr	r2, [r3, #12]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	7a1b      	ldrb	r3, [r3, #8]
 8000266:	4619      	mov	r1, r3
 8000268:	2301      	movs	r3, #1
 800026a:	408b      	lsls	r3, r1
 800026c:	43db      	mvns	r3, r3
 800026e:	4619      	mov	r1, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	400a      	ands	r2, r1
 8000276:	60da      	str	r2, [r3, #12]
	}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr

08000282 <_Z5delayj>:




void delay(unsigned int delay_time)
{
 8000282:	b480      	push	{r7}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < delay_time; i++);
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e002      	b.n	8000296 <_Z5delayj+0x14>
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	429a      	cmp	r2, r3
 800029c:	d3f8      	bcc.n	8000290 <_Z5delayj+0xe>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
	...

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

	unsigned int delay_time = 100000;
 80002b2:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <main+0x7c>)
 80002b4:	61fb      	str	r3, [r7, #28]
  //clock gating for GPIOC and GPIOB
  RCC->APB2ENR = RCC_GPIOC_EN | RCC_GPIOB_EN | RCC_GPIOA_EN;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <main+0x80>)
 80002b8:	221c      	movs	r2, #28
 80002ba:	619a      	str	r2, [r3, #24]
  //pin B4 as input floating pin
//  GPIOB->CRL = (INPUT_FLOATING << PIN_B4);
//  GPIOC->CRH = (OUTPUT_MAX_SPEED_50 << PIN_C13);
//  GPIOB->CRH = (OUTPUT_MAX_SPEED_50 << PIN_B9);
  GPIOA->CRL = (OUTPUT_MAX_SPEED_50 << PIN_A1) | (OUTPUT_MAX_SPEED_50 << PIN_A2) | (OUTPUT_MAX_SPEED_50 << PIN_A3);
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <main+0x84>)
 80002be:	f243 3230 	movw	r2, #13104	; 0x3330
 80002c2:	601a      	str	r2, [r3, #0]
  Button button_b4(GPIOB, PIN_B4);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2210      	movs	r2, #16
 80002ca:	491a      	ldr	r1, [pc, #104]	; (8000334 <main+0x88>)
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff3d 	bl	800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>
  LED led(GPIOC, PIN_C13);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2214      	movs	r2, #20
 80002d6:	4918      	ldr	r1, [pc, #96]	; (8000338 <main+0x8c>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff7d 	bl	80001d8 <_ZN3LEDC1EP12GPIO_TypeDefh>

  while (1)
  {

	  Status value = button_b4.get_Button_Status();
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff57 	bl	8000196 <_ZN6Button17get_Button_StatusEv>
 80002e8:	4603      	mov	r3, r0
 80002ea:	76fb      	strb	r3, [r7, #27]
//
	  if(value == pressed)
 80002ec:	7efb      	ldrb	r3, [r7, #27]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d111      	bne.n	8000316 <main+0x6a>
//		  led.setStatusHigh();
////		  GPIOA->ODR |= (SHIFT_STEPs << RGB_PIN_1) | (SHIFT_STEPs << RGB_PIN_2) | (1 << RGB_PIN_3);
//
//		  led.setStatusLow();
//		  GPIOA->ODR &=~ (SHIFT_STEPs << RGB_PIN_1) & (SHIFT_STEPs << RGB_PIN_2) & (SHIFT_STEPs << RGB_PIN_3);
	  	  GPIOA->ODR |= (SHIFT_STEPs << RGB_PIN_1) | (SHIFT_STEPs << RGB_PIN_2) | (1 << RGB_PIN_3);
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <main+0x84>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <main+0x84>)
 80002f8:	f043 030e 	orr.w	r3, r3, #14
 80002fc:	60d3      	str	r3, [r2, #12]
	  	  delay(delay_time);
 80002fe:	69f8      	ldr	r0, [r7, #28]
 8000300:	f7ff ffbf 	bl	8000282 <_Z5delayj>
	  	  GPIOA->ODR &=~ (SHIFT_STEPs << RGB_PIN_1) & (SHIFT_STEPs << RGB_PIN_2) & (SHIFT_STEPs << RGB_PIN_3);
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <main+0x84>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <main+0x84>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
	  	  delay(delay_time);
 800030e:	69f8      	ldr	r0, [r7, #28]
 8000310:	f7ff ffb7 	bl	8000282 <_Z5delayj>
 8000314:	e7e3      	b.n	80002de <main+0x32>
	  }
	  else
	  {
		  GPIOA->ODR &=~ (1 << 1) & (1 << 3) & (1 << 2);
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <main+0x84>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <main+0x84>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
//		  led.setStatusLow();
//		  GPIOB->ODR &=~ (1 << 9);
		  delay(delay_time);
 8000320:	69f8      	ldr	r0, [r7, #28]
 8000322:	f7ff ffae 	bl	8000282 <_Z5delayj>
	  }
  }
 8000326:	e7da      	b.n	80002de <main+0x32>
 8000328:	000186a0 	.word	0x000186a0
 800032c:	40021000 	.word	0x40021000
 8000330:	40010800 	.word	0x40010800
 8000334:	40010c00 	.word	0x40010c00
 8000338:	40011000 	.word	0x40011000

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000340:	e7fe      	b.n	8000340 <NMI_Handler+0x4>

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f82f 	bl	80003e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}

0800038a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
	...

08000398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000398:	f7ff fff7 	bl	800038a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800039e:	490c      	ldr	r1, [pc, #48]	; (80003d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003b4:	4c09      	ldr	r4, [pc, #36]	; (80003dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c2:	f000 f821 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff71 	bl	80002ac <main>
  bx lr
 80003ca:	4770      	bx	lr
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d4:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 80003d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003dc:	20000024 	.word	0x20000024

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <HAL_IncTick+0x1c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <HAL_IncTick+0x20>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <HAL_IncTick+0x20>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	20000000 	.word	0x20000000
 8000404:	20000020 	.word	0x20000020

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	2600      	movs	r6, #0
 800040c:	4d0c      	ldr	r5, [pc, #48]	; (8000440 <__libc_init_array+0x38>)
 800040e:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	f000 f81a 	bl	8000450 <_init>
 800041c:	2600      	movs	r6, #0
 800041e:	4d0a      	ldr	r5, [pc, #40]	; (8000448 <__libc_init_array+0x40>)
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <__libc_init_array+0x44>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000490 	.word	0x08000490
 8000444:	08000490 	.word	0x08000490
 8000448:	08000490 	.word	0x08000490
 800044c:	08000494 	.word	0x08000494

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
