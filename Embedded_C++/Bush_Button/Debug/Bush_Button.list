
Bush_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002f8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002f8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000eeb  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000053a  00000000  00000000  00020f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000132  00000000  00000000  00021650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001536e  00000000  00000000  00021782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fb1  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b913  00000000  00000000  00038aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000514  00000000  00000000  000b43b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b48c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002d4 	.word	0x080002d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002d4 	.word	0x080002d4

0800014c <_Z5delayj>:




void delay(unsigned int delay_time)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < delay_time; i++);
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e002      	b.n	8000160 <_Z5delayj+0x14>
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3301      	adds	r3, #1
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	68fa      	ldr	r2, [r7, #12]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	429a      	cmp	r2, r3
 8000166:	d3f8      	bcc.n	800015a <_Z5delayj+0xe>
}
 8000168:	bf00      	nop
 800016a:	bf00      	nop
 800016c:	3714      	adds	r7, #20
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <main>:

int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
	RCC->APB2ENR = RCC_GPIOC_EN | RCC_GPIOB_EN | RCC_GPIOA_EN;
 800017a:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <main+0x40>)
 800017c:	221c      	movs	r2, #28
 800017e:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = (OUTPUT_MAX_SPEED_50 << PIN_A1) | (OUTPUT_MAX_SPEED_50 << PIN_A2) | (OUTPUT_MAX_SPEED_50 << PIN_A3);
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <main+0x44>)
 8000182:	f243 3230 	movw	r2, #13104	; 0x3330
 8000186:	601a      	str	r2, [r3, #0]

  unsigned int delay_time = 100000;
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <main+0x48>)
 800018a:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  GPIOA->ODR |= (SHIFT_STEPs << 4);
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <main+0x44>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <main+0x44>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	60d3      	str	r3, [r2, #12]
	  delay(delay_time);
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f7ff ffd7 	bl	800014c <_Z5delayj>
	  GPIOA->ODR &=~ (SHIFT_STEPs << 4);
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <main+0x44>)
 80001a0:	68db      	ldr	r3, [r3, #12]
 80001a2:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <main+0x44>)
 80001a4:	f023 0310 	bic.w	r3, r3, #16
 80001a8:	60d3      	str	r3, [r2, #12]
	  delay(delay_time);
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f7ff ffce 	bl	800014c <_Z5delayj>
	  GPIOA->ODR |= (SHIFT_STEPs << 4);
 80001b0:	e7ec      	b.n	800018c <main+0x18>
 80001b2:	bf00      	nop
 80001b4:	40021000 	.word	0x40021000
 80001b8:	40010800 	.word	0x40010800
 80001bc:	000186a0 	.word	0x000186a0

080001c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80001c4:	e7fe      	b.n	80001c4 <NMI_Handler+0x4>

080001c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001c6:	b480      	push	{r7}
 80001c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001ca:	e7fe      	b.n	80001ca <HardFault_Handler+0x4>

080001cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001d0:	e7fe      	b.n	80001d0 <MemManage_Handler+0x4>

080001d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001d2:	b480      	push	{r7}
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001d6:	e7fe      	b.n	80001d6 <BusFault_Handler+0x4>

080001d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <UsageFault_Handler+0x4>

080001de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001de:	b480      	push	{r7}
 80001e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr

080001ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001ea:	b480      	push	{r7}
 80001ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr

080001f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr

08000202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000206:	f000 f82f 	bl	8000268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}

0800020e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
	...

0800021c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800021c:	f7ff fff7 	bl	800020e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000220:	480b      	ldr	r0, [pc, #44]	; (8000250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000228:	e002      	b.n	8000230 <LoopCopyDataInit>

0800022a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800022c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022e:	3304      	adds	r3, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000234:	d3f9      	bcc.n	800022a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000238:	4c09      	ldr	r4, [pc, #36]	; (8000260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800023c:	e001      	b.n	8000242 <LoopFillZerobss>

0800023e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000240:	3204      	adds	r2, #4

08000242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000244:	d3fb      	bcc.n	800023e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000246:	f000 f821 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024a:	f7ff ff93 	bl	8000174 <main>
  bx lr
 800024e:	4770      	bx	lr
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000258:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 800025c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000260:	20000024 	.word	0x20000024

08000264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_2_IRQHandler>
	...

08000268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <HAL_IncTick+0x1c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x20>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4413      	add	r3, r2
 8000278:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x20>)
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	20000000 	.word	0x20000000
 8000288:	20000020 	.word	0x20000020

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	2600      	movs	r6, #0
 8000290:	4d0c      	ldr	r5, [pc, #48]	; (80002c4 <__libc_init_array+0x38>)
 8000292:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	f000 f81a 	bl	80002d4 <_init>
 80002a0:	2600      	movs	r6, #0
 80002a2:	4d0a      	ldr	r5, [pc, #40]	; (80002cc <__libc_init_array+0x40>)
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <__libc_init_array+0x44>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
