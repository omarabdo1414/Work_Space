
GPIO_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800052c  0800052c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800052c  0800052c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800052c  0800052c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800052c  0800052c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000534  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000538  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000538  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017fb  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009c3  00000000  00000000  0002186b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00022230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017d  00000000  00000000  00022458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000156da  00000000  00000000  000225d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e9d  00000000  00000000  00037caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bac3  00000000  00000000  0003ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000066c  00000000  00000000  000b6610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b6c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000514 	.word	0x08000514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000514 	.word	0x08000514

0800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>:

#include "mcal.h"
#include "button.h"
#include "main.h"

Button::Button(GPIO_TypeDef * port, uint8_t pin) : PORT(port), button_pin_number(pin)
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	79fa      	ldrb	r2, [r7, #7]
 8000164:	711a      	strb	r2, [r3, #4]
{
	initialization();
 8000166:	68f8      	ldr	r0, [r7, #12]
 8000168:	f000 f809 	bl	800017e <_ZN6Button14initializationEv>

	/* Initialize output data register */
	PORT->ODR = 0x0000;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2200      	movs	r2, #0
 8000172:	60da      	str	r2, [r3, #12]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3710      	adds	r7, #16
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}

0800017e <_ZN6Button14initializationEv>:

void Button::initialization()
{
 800017e:	b480      	push	{r7}
 8000180:	b083      	sub	sp, #12
 8000182:	af00      	add	r7, sp, #0
 8000184:	6078      	str	r0, [r7, #4]
	if (button_pin_number < 8)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	791b      	ldrb	r3, [r3, #4]
 800018a:	2b07      	cmp	r3, #7
 800018c:	d808      	bhi.n	80001a0 <_ZN6Button14initializationEv+0x22>
	{
		PORT->CRL = (BUTTON_CONFIGURATION_AND_MODE << SHIFTED_TIMES * button_pin_number);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	791b      	ldrb	r3, [r3, #4]
 8000192:	009b      	lsls	r3, r3, #2
 8000194:	2204      	movs	r2, #4
 8000196:	409a      	lsls	r2, r3
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	601a      	str	r2, [r3, #0]
	}
	else if (button_pin_number > 8 && button_pin_number < 16)
	{
		PORT->CRH = (BUTTON_CONFIGURATION_AND_MODE << SHIFTED_TIMES * (button_pin_number % 8));
	}
}
 800019e:	e011      	b.n	80001c4 <_ZN6Button14initializationEv+0x46>
	else if (button_pin_number > 8 && button_pin_number < 16)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	791b      	ldrb	r3, [r3, #4]
 80001a4:	2b08      	cmp	r3, #8
 80001a6:	d90d      	bls.n	80001c4 <_ZN6Button14initializationEv+0x46>
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	791b      	ldrb	r3, [r3, #4]
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d809      	bhi.n	80001c4 <_ZN6Button14initializationEv+0x46>
		PORT->CRH = (BUTTON_CONFIGURATION_AND_MODE << SHIFTED_TIMES * (button_pin_number % 8));
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	791b      	ldrb	r3, [r3, #4]
 80001b4:	f003 0307 	and.w	r3, r3, #7
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	2204      	movs	r2, #4
 80001bc:	409a      	lsls	r2, r3
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <_ZN6Button16xGetButtonStatusEv>:

Status Button::xGetButtonStatus()
{
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
	return static_cast<Status>(PORT->IDR & (1 << 4)); //Bit masking
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	f003 0310 	and.w	r3, r3, #16
 80001e2:	b2db      	uxtb	r3, r3
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <_ZN3LEDC1EP12GPIO_TypeDefh>:

#include "mcal.h"
#include "main.h"
#include "led.h"

LED::LED(GPIO_TypeDef * PORT, uint8_t pin) : LED_PORT(PORT), pinNumber(pin)
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60f8      	str	r0, [r7, #12]
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	79fa      	ldrb	r2, [r7, #7]
 8000206:	711a      	strb	r2, [r3, #4]
{
	initialization();
 8000208:	68f8      	ldr	r0, [r7, #12]
 800020a:	f000 f836 	bl	800027a <_ZN3LED14initializationEv>

	/* Initialize output data register */
	LED_PORT->ODR = 0x0000;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
}
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	4618      	mov	r0, r3
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN3LED5LedONEv>:

void LED::LedON()
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	LED_PORT->ODR |= (1 << pinNumber);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	68da      	ldr	r2, [r3, #12]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	4619      	mov	r1, r3
 8000234:	2301      	movs	r3, #1
 8000236:	408b      	lsls	r3, r1
 8000238:	4619      	mov	r1, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	430a      	orrs	r2, r1
 8000240:	60da      	str	r2, [r3, #12]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <_ZN3LED6LedOFFEv>:

void LED::LedOFF()
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	LED_PORT->ODR &= ~(1 << pinNumber);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	68da      	ldr	r2, [r3, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	4619      	mov	r1, r3
 8000260:	2301      	movs	r3, #1
 8000262:	408b      	lsls	r3, r1
 8000264:	43db      	mvns	r3, r3
 8000266:	4619      	mov	r1, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	400a      	ands	r2, r1
 800026e:	60da      	str	r2, [r3, #12]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <_ZN3LED14initializationEv>:

void LED::initialization()
{
 800027a:	b480      	push	{r7}
 800027c:	b083      	sub	sp, #12
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
	if (pinNumber < 8)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	791b      	ldrb	r3, [r3, #4]
 8000286:	2b07      	cmp	r3, #7
 8000288:	d808      	bhi.n	800029c <_ZN3LED14initializationEv+0x22>
	{
		LED_PORT->CRL = (OUTPUT_MAX_SPEED_AND_CONFIGURATION << SHIFTED_TIMES * pinNumber);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	791b      	ldrb	r3, [r3, #4]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	2203      	movs	r2, #3
 8000292:	409a      	lsls	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	601a      	str	r2, [r3, #0]
	}
	else if (pinNumber > 8 && pinNumber < 16)
	{
		LED_PORT->CRH = (OUTPUT_MAX_SPEED_AND_CONFIGURATION << SHIFTED_TIMES * (pinNumber % 8));
	}
}
 800029a:	e011      	b.n	80002c0 <_ZN3LED14initializationEv+0x46>
	else if (pinNumber > 8 && pinNumber < 16)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	791b      	ldrb	r3, [r3, #4]
 80002a0:	2b08      	cmp	r3, #8
 80002a2:	d90d      	bls.n	80002c0 <_ZN3LED14initializationEv+0x46>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	2b0f      	cmp	r3, #15
 80002aa:	d809      	bhi.n	80002c0 <_ZN3LED14initializationEv+0x46>
		LED_PORT->CRH = (OUTPUT_MAX_SPEED_AND_CONFIGURATION << SHIFTED_TIMES * (pinNumber % 8));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	f003 0307 	and.w	r3, r3, #7
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	2203      	movs	r2, #3
 80002b8:	409a      	lsls	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
	...

080002cc <_Z22vRCC_APP2_Enable_Clockbh>:
#include "led.h"



void vRCC_APP2_Enable_Clock(bool enable,uint8_t PORT)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	if(enable)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d00a      	beq.n	80002f8 <_Z22vRCC_APP2_Enable_Clockbh+0x2c>
	{
		RCC->APB2ENR |=  (1 << PORT);
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <_Z22vRCC_APP2_Enable_Clockbh+0x4c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <_Z22vRCC_APP2_Enable_Clockbh+0x4c>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	6193      	str	r3, [r2, #24]
	}
	else
	{
		RCC->APB2ENR &= ~(1 << PORT);
	}
}
 80002f6:	e00a      	b.n	800030e <_Z22vRCC_APP2_Enable_Clockbh+0x42>
		RCC->APB2ENR &= ~(1 << PORT);
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <_Z22vRCC_APP2_Enable_Clockbh+0x4c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	2101      	movs	r1, #1
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	43d2      	mvns	r2, r2
 8000306:	4611      	mov	r1, r2
 8000308:	4a03      	ldr	r2, [pc, #12]	; (8000318 <_Z22vRCC_APP2_Enable_Clockbh+0x4c>)
 800030a:	400b      	ands	r3, r1
 800030c:	6193      	str	r3, [r2, #24]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000

0800031c <_Z7delayMSj>:

void delayMS(unsigned int ticks)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < ticks; i++);
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	e002      	b.n	8000330 <_Z7delayMSj+0x14>
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3301      	adds	r3, #1
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	429a      	cmp	r2, r3
 8000336:	d3f8      	bcc.n	800032a <_Z7delayMSj+0xe>
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <main>:

int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
	vRCC_APP2_Enable_Clock(1 , RCC_IOPA);
 800034a:	2102      	movs	r1, #2
 800034c:	2001      	movs	r0, #1
 800034e:	f7ff ffbd 	bl	80002cc <_Z22vRCC_APP2_Enable_Clockbh>
	vRCC_APP2_Enable_Clock(1 , RCC_IOPB);
 8000352:	2103      	movs	r1, #3
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ffb9 	bl	80002cc <_Z22vRCC_APP2_Enable_Clockbh>
	vRCC_APP2_Enable_Clock(1 , RCC_IOPC);
 800035a:	2104      	movs	r1, #4
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ffb5 	bl	80002cc <_Z22vRCC_APP2_Enable_Clockbh>

	LED led1(GPIOA, LED_PIN_NUMBER_PA2);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2202      	movs	r2, #2
 8000368:	4921      	ldr	r1, [pc, #132]	; (80003f0 <main+0xac>)
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff3f 	bl	80001ee <_ZN3LEDC1EP12GPIO_TypeDefh>
	LED led2(GPIOC, LED_PIN_NUMBER_C13);
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	220d      	movs	r2, #13
 8000376:	491f      	ldr	r1, [pc, #124]	; (80003f4 <main+0xb0>)
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff38 	bl	80001ee <_ZN3LEDC1EP12GPIO_TypeDefh>

	Button btn(GPIOB, BUTTON_PIN_NUMBER_BB4);
 800037e:	463b      	mov	r3, r7
 8000380:	2204      	movs	r2, #4
 8000382:	491d      	ldr	r1, [pc, #116]	; (80003f8 <main+0xb4>)
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff fee1 	bl	800014c <_ZN6ButtonC1EP12GPIO_TypeDefh>

  while (1)
  {
	  if(!btn.xGetButtonStatus())
 800038a:	463b      	mov	r3, r7
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff1e 	bl	80001ce <_ZN6Button16xGetButtonStatusEv>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d01a      	beq.n	80003d8 <main+0x94>
	  {
		  led1.LedON();
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff3a 	bl	8000220 <_ZN3LED5LedONEv>
		  led2.LedON();
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff35 	bl	8000220 <_ZN3LED5LedONEv>
		  delayMS(100000);
 80003b6:	4811      	ldr	r0, [pc, #68]	; (80003fc <main+0xb8>)
 80003b8:	f7ff ffb0 	bl	800031c <_Z7delayMSj>
	  	  led1.LedOFF();
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff43 	bl	800024c <_ZN3LED6LedOFFEv>
		  led2.LedOFF();
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff3e 	bl	800024c <_ZN3LED6LedOFFEv>
		  delayMS(100000);
 80003d0:	480a      	ldr	r0, [pc, #40]	; (80003fc <main+0xb8>)
 80003d2:	f7ff ffa3 	bl	800031c <_Z7delayMSj>
 80003d6:	e7d8      	b.n	800038a <main+0x46>
	  }
	  else
	  {
		  led1.LedOFF();
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff35 	bl	800024c <_ZN3LED6LedOFFEv>
		  led2.LedOFF();
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff30 	bl	800024c <_ZN3LED6LedOFFEv>
	  if(!btn.xGetButtonStatus())
 80003ec:	e7cd      	b.n	800038a <main+0x46>
 80003ee:	bf00      	nop
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40011000 	.word	0x40011000
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	000186a0 	.word	0x000186a0

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000404:	e7fe      	b.n	8000404 <NMI_Handler+0x4>

08000406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <HardFault_Handler+0x4>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler+0x4>

0800041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000446:	f000 f82f 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}

0800044e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
	...

0800045c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800045c:	f7ff fff7 	bl	800044e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000464:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a09      	ldr	r2, [pc, #36]	; (800049c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000478:	4c09      	ldr	r4, [pc, #36]	; (80004a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000486:	f000 f821 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff ff5b 	bl	8000344 <main>
  bx lr
 800048e:	4770      	bx	lr
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000498:	08000534 	.word	0x08000534
  ldr r2, =_sbss
 800049c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a0:	20000024 	.word	0x20000024

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_IncTick+0x1c>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_IncTick+0x20>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4413      	add	r3, r2
 80004b8:	4a03      	ldr	r2, [pc, #12]	; (80004c8 <HAL_IncTick+0x20>)
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000020 	.word	0x20000020

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	2600      	movs	r6, #0
 80004d0:	4d0c      	ldr	r5, [pc, #48]	; (8000504 <__libc_init_array+0x38>)
 80004d2:	4c0d      	ldr	r4, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	f000 f81a 	bl	8000514 <_init>
 80004e0:	2600      	movs	r6, #0
 80004e2:	4d0a      	ldr	r5, [pc, #40]	; (800050c <__libc_init_array+0x40>)
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <__libc_init_array+0x44>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800052c 	.word	0x0800052c
 8000508:	0800052c 	.word	0x0800052c
 800050c:	0800052c 	.word	0x0800052c
 8000510:	08000530 	.word	0x08000530

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
