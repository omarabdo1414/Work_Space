
LED_And_BB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  08000364  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000364  08000364  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000364  08000364  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800036c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000370  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000370  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c9d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e0  00000000  00000000  00020d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  000211f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000133  00000000  00000000  000213a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015360  00000000  00000000  000214db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fe9  00000000  00000000  0003683b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b7b4  00000000  00000000  00038824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000050c  00000000  00000000  000b3fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b44e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800034c 	.word	0x0800034c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800034c 	.word	0x0800034c

0800014c <main>:
};

void vGPIOInit(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	vGPIOInit();
 8000152:	f000 f859 	bl	8000208 <_Z9vGPIOInitv>
	GPIOA->CRL = (0X3 << 4 * PIN_NUMBER);// 0x00000030
 8000156:	4b28      	ldr	r3, [pc, #160]	; (80001f8 <main+0xac>)
 8000158:	f44f 7240 	mov.w	r2, #768	; 0x300
 800015c:	601a      	str	r2, [r3, #0]


  while (1)
  {
	  Status buttonState = static_cast<Status>((GPIOB->IDR & (1 << 4)) ? 1 : 0);
 800015e:	4b27      	ldr	r3, [pc, #156]	; (80001fc <main+0xb0>)
 8000160:	689b      	ldr	r3, [r3, #8]
 8000162:	f003 0310 	and.w	r3, r3, #16
 8000166:	2b00      	cmp	r3, #0
 8000168:	d001      	beq.n	800016e <main+0x22>
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <main+0x24>
 800016e:	2300      	movs	r3, #0
 8000170:	70fb      	strb	r3, [r7, #3]
	  if(buttonState == pressed)
 8000172:	78fb      	ldrb	r3, [r7, #3]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d127      	bne.n	80001c8 <main+0x7c>
	  {
		  GPIOC->ODR = (1 << 13);
 8000178:	4b21      	ldr	r3, [pc, #132]	; (8000200 <main+0xb4>)
 800017a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800017e:	60da      	str	r2, [r3, #12]
		  GPIOA->ODR = (1 << PIN_NUMBER);
 8000180:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <main+0xac>)
 8000182:	2204      	movs	r2, #4
 8000184:	60da      	str	r2, [r3, #12]
		  for(int i = 0; i < 100000; i++);
 8000186:	2300      	movs	r3, #0
 8000188:	60fb      	str	r3, [r7, #12]
 800018a:	e002      	b.n	8000192 <main+0x46>
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	3301      	adds	r3, #1
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <main+0xb8>)
 8000196:	4293      	cmp	r3, r2
 8000198:	ddf8      	ble.n	800018c <main+0x40>
		  GPIOC->ODR &=~(1 << 13);
 800019a:	4b19      	ldr	r3, [pc, #100]	; (8000200 <main+0xb4>)
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	4a18      	ldr	r2, [pc, #96]	; (8000200 <main+0xb4>)
 80001a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001a4:	60d3      	str	r3, [r2, #12]
		  GPIOA->ODR &=~(1 << PIN_NUMBER);
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0xac>)
 80001a8:	68db      	ldr	r3, [r3, #12]
 80001aa:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <main+0xac>)
 80001ac:	f023 0304 	bic.w	r3, r3, #4
 80001b0:	60d3      	str	r3, [r2, #12]
		  for(int i = 0; i < 100000; i++);
 80001b2:	2300      	movs	r3, #0
 80001b4:	60bb      	str	r3, [r7, #8]
 80001b6:	e002      	b.n	80001be <main+0x72>
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	4a10      	ldr	r2, [pc, #64]	; (8000204 <main+0xb8>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	ddf8      	ble.n	80001b8 <main+0x6c>
 80001c6:	e7ca      	b.n	800015e <main+0x12>
	  }
	  else
	  {
		  GPIOC->ODR &=~(1 << 13);
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <main+0xb4>)
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	4a0c      	ldr	r2, [pc, #48]	; (8000200 <main+0xb4>)
 80001ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001d2:	60d3      	str	r3, [r2, #12]
		  GPIOA->ODR &=~(1 << PIN_NUMBER);
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <main+0xac>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <main+0xac>)
 80001da:	f023 0304 	bic.w	r3, r3, #4
 80001de:	60d3      	str	r3, [r2, #12]
		  for(int i = 0; i < 100000; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	e002      	b.n	80001ec <main+0xa0>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3301      	adds	r3, #1
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a05      	ldr	r2, [pc, #20]	; (8000204 <main+0xb8>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	ddf8      	ble.n	80001e6 <main+0x9a>
	  }
  }
 80001f4:	e7b3      	b.n	800015e <main+0x12>
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	40011000 	.word	0x40011000
 8000204:	0001869f 	.word	0x0001869f

08000208 <_Z9vGPIOInitv>:
}


// GPIO Initialization Function
void vGPIOInit(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOB, GPIOC and GPIOA
    RCC->APB2ENR = (1 << 3) | (1 << 4) | (1 << 2);
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <_Z9vGPIOInitv+0x24>)
 800020e:	221c      	movs	r2, #28
 8000210:	619a      	str	r2, [r3, #24]

    // Configure PC13 as output Max Speed
//    GPIOC->CRH &= ~(0xF << (4 * 5));   // Clear current settings
    GPIOC->CRH = (0x3 << (4 * 5));    // Set PC13 as General purpose output push-pull, max speed 2 MHz
 8000212:	4b07      	ldr	r3, [pc, #28]	; (8000230 <_Z9vGPIOInitv+0x28>)
 8000214:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000218:	605a      	str	r2, [r3, #4]

    // Configure PB4 as input floating
//    GPIOB->CRL &= ~(0xF << (4 * 4));   // Clear current settings
    GPIOB->CRL = (0x4 << (4 * 4));    // Set PB4 as input floating
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <_Z9vGPIOInitv+0x2c>)
 800021c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000220:	601a      	str	r2, [r3, #0]

}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	40011000 	.word	0x40011000
 8000234:	40010c00 	.word	0x40010c00

08000238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800023c:	e7fe      	b.n	800023c <NMI_Handler+0x4>

0800023e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000242:	e7fe      	b.n	8000242 <HardFault_Handler+0x4>

08000244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000248:	e7fe      	b.n	8000248 <MemManage_Handler+0x4>

0800024a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800024e:	e7fe      	b.n	800024e <BusFault_Handler+0x4>

08000250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <UsageFault_Handler+0x4>

08000256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr

0800026e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800027e:	f000 f82f 	bl	80002e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000294:	f7ff fff7 	bl	8000286 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800029a:	490c      	ldr	r1, [pc, #48]	; (80002cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002b0:	4c09      	ldr	r4, [pc, #36]	; (80002d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002be:	f000 f821 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff43 	bl	800014c <main>
  bx lr
 80002c6:	4770      	bx	lr
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002d0:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002d8:	20000024 	.word	0x20000024

080002dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC1_2_IRQHandler>
	...

080002e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <HAL_IncTick+0x1c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <HAL_IncTick+0x20>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4413      	add	r3, r2
 80002f0:	4a03      	ldr	r2, [pc, #12]	; (8000300 <HAL_IncTick+0x20>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000020 	.word	0x20000020

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	2600      	movs	r6, #0
 8000308:	4d0c      	ldr	r5, [pc, #48]	; (800033c <__libc_init_array+0x38>)
 800030a:	4c0d      	ldr	r4, [pc, #52]	; (8000340 <__libc_init_array+0x3c>)
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	f000 f81a 	bl	800034c <_init>
 8000318:	2600      	movs	r6, #0
 800031a:	4d0a      	ldr	r5, [pc, #40]	; (8000344 <__libc_init_array+0x40>)
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <__libc_init_array+0x44>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
