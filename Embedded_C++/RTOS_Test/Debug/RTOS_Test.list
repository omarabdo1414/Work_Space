
RTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002070  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002950  2000000c  080021bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000295c  080021bc  0002295c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f08  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dfd  00000000  00000000  00023f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  00024d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000034a  00000000  00000000  000251e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d3d  00000000  00000000  0002552a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004d1f  00000000  00000000  0003c267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000865ab  00000000  00000000  00040f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010fc  00000000  00000000  000c7534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c8630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002168 	.word	0x08002168

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002168 	.word	0x08002168

08000150 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800015c:	f001 fa62 	bl	8001624 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b46      	ldr	r3, [pc, #280]	; (800027c <pvPortMalloc+0x12c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000168:	f000 f8dc 	bl	8000324 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b43      	ldr	r3, [pc, #268]	; (800027c <pvPortMalloc+0x12c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f003 0307 	and.w	r3, r3, #7
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	3308      	adds	r3, #8
 8000186:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	43db      	mvns	r3, r3
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	d804      	bhi.n	800019c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	4413      	add	r3, r2
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e001      	b.n	80001a0 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db63      	blt.n	800026e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d060      	beq.n	800026e <pvPortMalloc+0x11e>
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <pvPortMalloc+0x130>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d85b      	bhi.n	800026e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001b6:	4b33      	ldr	r3, [pc, #204]	; (8000284 <pvPortMalloc+0x134>)
 80001b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <pvPortMalloc+0x134>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001c0:	e004      	b.n	80001cc <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d903      	bls.n	80001de <pvPortMalloc+0x8e>
 80001d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f1      	bne.n	80001c2 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80001de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <pvPortMalloc+0x138>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d043      	beq.n	800026e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2208      	movs	r2, #8
 80001ec:	4413      	add	r3, r2
 80001ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1ad3      	subs	r3, r2, r3
 8000200:	2208      	movs	r2, #8
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4293      	cmp	r3, r2
 8000206:	d922      	bls.n	800024e <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <pvPortMalloc+0x134>)
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	e002      	b.n	8000234 <pvPortMalloc+0xe4>
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	61bb      	str	r3, [r7, #24]
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f6      	bhi.n	800022e <pvPortMalloc+0xde>
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pvPortMalloc+0x130>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <pvPortMalloc+0x130>)
 800025a:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800026e:	f001 f9e7 	bl	8001640 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000272:	69fb      	ldr	r3, [r7, #28]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3728      	adds	r7, #40	; 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20002838 	.word	0x20002838
 8000280:	20000000 	.word	0x20000000
 8000284:	20002828 	.word	0x20002828
 8000288:	20002830 	.word	0x20002830

0800028c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d039      	beq.n	8000312 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800029e:	2308      	movs	r3, #8
 80002a0:	425b      	negs	r3, r3
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	0fdb      	lsrs	r3, r3, #31
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02a      	beq.n	8000312 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d126      	bne.n	8000312 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 80002d0:	f001 f9a8 	bl	8001624 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <vPortFree+0x90>)
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e002      	b.n	80002e6 <vPortFree+0x5a>
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8f6      	bhi.n	80002e0 <vPortFree+0x54>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <vPortFree+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <vPortFree+0x94>)
 800030c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800030e:	f001 f997 	bl	8001640 <xTaskResumeAll>
            }
        }
    }
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20002828 	.word	0x20002828
 8000320:	20000000 	.word	0x20000000

08000324 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <prvHeapInit+0x44>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <prvHeapInit+0x48>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <prvHeapInit+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <prvHeapInit+0x4c>)
 8000340:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000344:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <prvHeapInit+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000356:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <prvHeapInit+0x4c>)
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	2000002f 	.word	0x2000002f
 800036c:	20002828 	.word	0x20002828
 8000370:	20002830 	.word	0x20002830

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ca:	b480      	push	{r7}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000426:	d103      	bne.n	8000430 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	e00c      	b.n	800044a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3308      	adds	r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	e002      	b.n	800043e <vListInsert+0x2e>
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	429a      	cmp	r2, r3
 8000448:	d2f6      	bcs.n	8000438 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	601a      	str	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	6892      	ldr	r2, [r2, #8]
 8000496:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	6852      	ldr	r2, [r2, #4]
 80004a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d103      	bne.n	80004b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
	...

080004d4 <redLED>:
TaskHandle_t RedLED_TaskHandle;

QueueHandle_t queue;

void redLED(void *rl)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR = (1 << 2);
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <redLED+0x54>)
 80004de:	2204      	movs	r2, #4
 80004e0:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = (1 << 8);
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <redLED+0x58>)
 80004e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e8:	601a      	str	r2, [r3, #0]
	unsigned long priority = uxTaskPriorityGet(RedLED_TaskHandle);
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <redLED+0x5c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fe56 	bl	80011a0 <uxTaskPriorityGet>
 80004f4:	60f8      	str	r0, [r7, #12]
	priority += 2;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3302      	adds	r3, #2
 80004fa:	60fb      	str	r3, [r7, #12]
	vTaskPrioritySet(RedLED_TaskHandle, priority);
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <redLED+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68f9      	ldr	r1, [r7, #12]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fe66 	bl	80011d4 <vTaskPrioritySet>

	char control = 'w';
 8000508:	2377      	movs	r3, #119	; 0x77
 800050a:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		GPIOA->ODR = (1 << 2);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <redLED+0x58>)
 800050e:	2204      	movs	r2, #4
 8000510:	60da      	str	r2, [r3, #12]
		xQueueSendToBack(queue, control, portMAX_DELAY);
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <redLED+0x60>)
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	4619      	mov	r1, r3
 800051a:	2300      	movs	r3, #0
 800051c:	f04f 32ff 	mov.w	r2, #4294967295
 8000520:	f000 fa6c 	bl	80009fc <xQueueGenericSend>
		GPIOA->ODR = (1 << 2);
 8000524:	e7f2      	b.n	800050c <redLED+0x38>
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	2000283c 	.word	0x2000283c
 8000534:	20002840 	.word	0x20002840

08000538 <greenLED>:
//		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}

void greenLED(void *rl)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR = (1 << 2);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <greenLED+0x54>)
 8000542:	2204      	movs	r2, #4
 8000544:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = (1 << 4);
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <greenLED+0x58>)
 8000548:	2210      	movs	r2, #16
 800054a:	601a      	str	r2, [r3, #0]
	char received_control = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
	while(1)
	{

		//Suspend the redLED task
		vTaskSuspend(RedLED_TaskHandle);
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <greenLED+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 ff01 	bl	800135c <vTaskSuspend>
		vTaskDelay(5000 / portTICK_PERIOD_MS);
 800055a:	f241 3088 	movw	r0, #5000	; 0x1388
 800055e:	f000 fdfb 	bl	8001158 <vTaskDelay>
		//Return from Suspending
		vTaskResume(RedLED_TaskHandle);
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <greenLED+0x5c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ffa8 	bl	80014bc <vTaskResume>
		xQueueReceive(queue, &received_control, portMAX_DELAY);
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <greenLED+0x60>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f107 010f 	add.w	r1, r7, #15
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fae9 	bl	8000b50 <xQueueReceive>

		if(received_control == 'w')
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b77      	cmp	r3, #119	; 0x77
 8000582:	d1e5      	bne.n	8000550 <greenLED+0x18>
		{
			GPIOA->ODR = (1 << 1);
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <greenLED+0x58>)
 8000586:	2202      	movs	r2, #2
 8000588:	60da      	str	r2, [r3, #12]
		vTaskSuspend(RedLED_TaskHandle);
 800058a:	e7e1      	b.n	8000550 <greenLED+0x18>
 800058c:	40021000 	.word	0x40021000
 8000590:	40010800 	.word	0x40010800
 8000594:	2000283c 	.word	0x2000283c
 8000598:	20002840 	.word	0x20002840

0800059c <main>:
}



int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af02      	add	r7, sp, #8
	queue = xQueueCreate(5, sizeof(char));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	2005      	movs	r0, #5
 80005a8:	f000 f9c6 	bl	8000938 <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x50>)
 80005b0:	6013      	str	r3, [r2, #0]

	if(queue != NULL)
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <main+0x50>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d015      	beq.n	80005e6 <main+0x4a>
	{
		xTaskCreate(redLED, "Red LED Task", 300, NULL, 2, &RedLED_TaskHandle);
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <main+0x54>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005c8:	490a      	ldr	r1, [pc, #40]	; (80005f4 <main+0x58>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <main+0x5c>)
 80005cc:	f000 fc78 	bl	8000ec0 <xTaskCreate>
		xTaskCreate(greenLED, "Green LED Task", 300, NULL, 2, NULL);
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <main+0x60>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x64>)
 80005e2:	f000 fc6d 	bl	8000ec0 <xTaskCreate>
	}

	vTaskStartScheduler();
 80005e6:	f000 ffe1 	bl	80015ac <vTaskStartScheduler>

  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x4e>
 80005ec:	20002840 	.word	0x20002840
 80005f0:	2000283c 	.word	0x2000283c
 80005f4:	08002180 	.word	0x08002180
 80005f8:	080004d5 	.word	0x080004d5
 80005fc:	08002190 	.word	0x08002190
 8000600:	08000539 	.word	0x08000539

08000604 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3b04      	subs	r3, #4
 8000614:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800061c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3b04      	subs	r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	f023 0201 	bic.w	r2, r3, #1
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3b04      	subs	r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <pxPortInitialiseStack+0x54>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3b14      	subs	r3, #20
 800063e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3b20      	subs	r3, #32
 800064a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800064c:	68fb      	ldr	r3, [r7, #12]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	0800065d 	.word	0x0800065d

0800065c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000666:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800066a:	f383 8811 	msr	BASEPRI, r3
 800066e:	f3bf 8f6f 	isb	sy
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000678:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800067a:	bf00      	nop
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0fc      	beq.n	800067c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <pxCurrentTCBConst2>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	6808      	ldr	r0, [r1, #0]
 8000696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800069a:	f380 8809 	msr	PSP, r0
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f04f 0000 	mov.w	r0, #0
 80006a6:	f380 8811 	msr	BASEPRI, r0
 80006aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80006ae:	4770      	bx	lr

080006b0 <pxCurrentTCBConst2>:
 80006b0:	20002844 	.word	0x20002844
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop

080006b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <prvPortStartFirstTask+0x1c>)
 80006ba:	6800      	ldr	r0, [r0, #0]
 80006bc:	6800      	ldr	r0, [r0, #0]
 80006be:	f380 8808 	msr	MSP, r0
 80006c2:	b662      	cpsie	i
 80006c4:	b661      	cpsie	f
 80006c6:	f3bf 8f4f 	dsb	sy
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	df00      	svc	0
 80006d0:	bf00      	nop
 80006d2:	0000      	.short	0x0000
 80006d4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop

080006dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <xPortStartScheduler+0x38>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <xPortStartScheduler+0x38>)
 80006e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80006ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <xPortStartScheduler+0x38>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a08      	ldr	r2, [pc, #32]	; (8000714 <xPortStartScheduler+0x38>)
 80006f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80006f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80006f8:	f000 f890 	bl	800081c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <xPortStartScheduler+0x3c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000702:	f7ff ffd9 	bl	80006b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000706:	f001 f98d 	bl	8001a24 <vTaskSwitchContext>
    prvTaskExitError();
 800070a:	f7ff ffa7 	bl	800065c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}
 8000714:	e000ed20 	.word	0xe000ed20
 8000718:	20000004 	.word	0x20000004

0800071c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
        __asm volatile
 8000722:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000726:	f383 8811 	msr	BASEPRI, r3
 800072a:	f3bf 8f6f 	isb	sy
 800072e:	f3bf 8f4f 	dsb	sy
 8000732:	607b      	str	r3, [r7, #4]
    }
 8000734:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <vPortEnterCritical+0x30>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <vPortEnterCritical+0x30>)
 800073e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000004 	.word	0x20000004

08000750 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <vPortExitCritical+0x30>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <vPortExitCritical+0x30>)
 800075e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <vPortExitCritical+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <vPortExitCritical+0x24>
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000772:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000004 	.word	0x20000004
	...

08000790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000790:	f3ef 8009 	mrs	r0, PSP
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <pxCurrentTCBConst>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007a0:	6010      	str	r0, [r2, #0]
 80007a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80007a6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80007aa:	f380 8811 	msr	BASEPRI, r0
 80007ae:	f001 f939 	bl	8001a24 <vTaskSwitchContext>
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	f380 8811 	msr	BASEPRI, r0
 80007ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007be:	6819      	ldr	r1, [r3, #0]
 80007c0:	6808      	ldr	r0, [r1, #0]
 80007c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007c6:	f380 8809 	msr	PSP, r0
 80007ca:	f3bf 8f6f 	isb	sy
 80007ce:	4770      	bx	lr

080007d0 <pxCurrentTCBConst>:
 80007d0:	20002844 	.word	0x20002844
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop

080007d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
        __asm volatile
 80007de:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80007e2:	f383 8811 	msr	BASEPRI, r3
 80007e6:	f3bf 8f6f 	isb	sy
 80007ea:	f3bf 8f4f 	dsb	sy
 80007ee:	607b      	str	r3, [r7, #4]
    }
 80007f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80007f2:	f001 f811 	bl	8001818 <xTaskIncrementTick>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d003      	beq.n	8000804 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SysTick_Handler+0x40>)
 80007fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f383 8811 	msr	BASEPRI, r3
    }
 800080e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	e000ed04 	.word	0xe000ed04

0800081c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <vPortSetupTimerInterrupt+0x28>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <vPortSetupTimerInterrupt+0x2c>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <vPortSetupTimerInterrupt+0x30>)
 800082e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000832:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <vPortSetupTimerInterrupt+0x28>)
 8000836:	2207      	movs	r2, #7
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010
 8000848:	e000e018 	.word	0xe000e018
 800084c:	e000e014 	.word	0xe000e014

08000850 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d05d      	beq.n	8000924 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800086c:	2b00      	cmp	r3, #0
 800086e:	d059      	beq.n	8000924 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000878:	2100      	movs	r1, #0
 800087a:	fba3 2302 	umull	r2, r3, r3, r2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d000      	beq.n	8000884 <xQueueGenericReset+0x34>
 8000882:	2101      	movs	r1, #1
 8000884:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000886:	2b00      	cmp	r3, #0
 8000888:	d14c      	bne.n	8000924 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800088a:	f7ff ff47 	bl	800071c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	441a      	add	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2200      	movs	r2, #0
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ba:	3b01      	subs	r3, #1
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008c0:	fb01 f303 	mul.w	r3, r1, r3
 80008c4:	441a      	add	r2, r3
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	22ff      	movs	r2, #255	; 0xff
 80008d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d114      	bne.n	800090a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d01a      	beq.n	800091e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	3310      	adds	r3, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f8f5 	bl	8001adc <xTaskRemoveFromEventList>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d012      	beq.n	800091e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <xQueueGenericReset+0xe4>)
 80008fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	e009      	b.n	800091e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	3310      	adds	r3, #16
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd30 	bl	8000374 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3324      	adds	r3, #36	; 0x24
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fd2b 	bl	8000374 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800091e:	f7ff ff17 	bl	8000750 <vPortExitCritical>
 8000922:	e001      	b.n	8000928 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000ed04 	.word	0xe000ed04

08000938 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	4613      	mov	r3, r2
 8000944:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d02d      	beq.n	80009ac <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000950:	2100      	movs	r1, #0
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	fba3 2302 	umull	r2, r3, r3, r2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d000      	beq.n	8000960 <xQueueGenericCreate+0x28>
 800095e:	2101      	movs	r1, #1
 8000960:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	d122      	bne.n	80009ac <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800096e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000972:	d81b      	bhi.n	80009ac <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	3350      	adds	r3, #80	; 0x50
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fbe4 	bl	8000150 <pvPortMalloc>
 8000988:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00d      	beq.n	80009ac <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3350      	adds	r3, #80	; 0x50
 8000998:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f000 f805 	bl	80009b6 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80009ac:	69fb      	ldr	r3, [r7, #28]
    }
 80009ae:	4618      	mov	r0, r3
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e002      	b.n	80009d8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009e4:	2101      	movs	r1, #1
 80009e6:	69b8      	ldr	r0, [r7, #24]
 80009e8:	f7ff ff32 	bl	8000850 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	78fa      	ldrb	r2, [r7, #3]
 80009f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a12:	f7ff fe83 	bl	800071c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d302      	bcc.n	8000a28 <xQueueGenericSend+0x2c>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d129      	bne.n	8000a7c <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	68b9      	ldr	r1, [r7, #8]
 8000a2c:	6a38      	ldr	r0, [r7, #32]
 8000a2e:	f000 f931 	bl	8000c94 <prvCopyDataToQueue>
 8000a32:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d010      	beq.n	8000a5e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	3324      	adds	r3, #36	; 0x24
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f84b 	bl	8001adc <xTaskRemoveFromEventList>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d013      	beq.n	8000a74 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <xQueueGenericSend+0x150>)
 8000a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	f3bf 8f4f 	dsb	sy
 8000a58:	f3bf 8f6f 	isb	sy
 8000a5c:	e00a      	b.n	8000a74 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <xQueueGenericSend+0x150>)
 8000a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	f3bf 8f4f 	dsb	sy
 8000a70:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a74:	f7ff fe6c 	bl	8000750 <vPortExitCritical>
                return pdPASS;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e063      	b.n	8000b44 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a82:	f7ff fe65 	bl	8000750 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e05c      	b.n	8000b44 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d106      	bne.n	8000a9e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f8e9 	bl	8001c6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a9e:	f7ff fe57 	bl	8000750 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000aa2:	f000 fdbf 	bl	8001624 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000aa6:	f7ff fe39 	bl	800071c <vPortEnterCritical>
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d103      	bne.n	8000ac0 <xQueueGenericSend+0xc4>
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d103      	bne.n	8000ad6 <xQueueGenericSend+0xda>
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ad6:	f7ff fe3b 	bl	8000750 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 f8d8 	bl	8001c98 <xTaskCheckForTimeOut>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d124      	bne.n	8000b38 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000aee:	6a38      	ldr	r0, [r7, #32]
 8000af0:	f000 f9c8 	bl	8000e84 <prvIsQueueFull>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d018      	beq.n	8000b2c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3310      	adds	r3, #16
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 ffd4 	bl	8001ab0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000b08:	6a38      	ldr	r0, [r7, #32]
 8000b0a:	f000 f953 	bl	8000db4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000b0e:	f000 fd97 	bl	8001640 <xTaskResumeAll>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f47f af7c 	bne.w	8000a12 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <xQueueGenericSend+0x150>)
 8000b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	f3bf 8f6f 	isb	sy
 8000b2a:	e772      	b.n	8000a12 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000b2c:	6a38      	ldr	r0, [r7, #32]
 8000b2e:	f000 f941 	bl	8000db4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b32:	f000 fd85 	bl	8001640 <xTaskResumeAll>
 8000b36:	e76c      	b.n	8000a12 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b38:	6a38      	ldr	r0, [r7, #32]
 8000b3a:	f000 f93b 	bl	8000db4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b3e:	f000 fd7f 	bl	8001640 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b42:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	e000ed04 	.word	0xe000ed04

08000b50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b64:	f7ff fdda 	bl	800071c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d01f      	beq.n	8000bb4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6a38      	ldr	r0, [r7, #32]
 8000b78:	f000 f8f6 	bl	8000d68 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00f      	beq.n	8000bac <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	3310      	adds	r3, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 ffa3 	bl	8001adc <xTaskRemoveFromEventList>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b9c:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <xQueueReceive+0x140>)
 8000b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bac:	f7ff fdd0 	bl	8000750 <vPortExitCritical>
                return pdPASS;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e069      	b.n	8000c88 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bba:	f7ff fdc9 	bl	8000750 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e062      	b.n	8000c88 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d106      	bne.n	8000bd6 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f84d 	bl	8001c6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bd6:	f7ff fdbb 	bl	8000750 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bda:	f000 fd23 	bl	8001624 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bde:	f7ff fd9d 	bl	800071c <vPortEnterCritical>
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bee:	d103      	bne.n	8000bf8 <xQueueReceive+0xa8>
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d103      	bne.n	8000c0e <xQueueReceive+0xbe>
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c0e:	f7ff fd9f 	bl	8000750 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c12:	1d3a      	adds	r2, r7, #4
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f83c 	bl	8001c98 <xTaskCheckForTimeOut>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d123      	bne.n	8000c6e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c26:	6a38      	ldr	r0, [r7, #32]
 8000c28:	f000 f916 	bl	8000e58 <prvIsQueueEmpty>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d017      	beq.n	8000c62 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	3324      	adds	r3, #36	; 0x24
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 ff38 	bl	8001ab0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c40:	6a38      	ldr	r0, [r7, #32]
 8000c42:	f000 f8b7 	bl	8000db4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c46:	f000 fcfb 	bl	8001640 <xTaskResumeAll>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d189      	bne.n	8000b64 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <xQueueReceive+0x140>)
 8000c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	e780      	b.n	8000b64 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c62:	6a38      	ldr	r0, [r7, #32]
 8000c64:	f000 f8a6 	bl	8000db4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c68:	f000 fcea 	bl	8001640 <xTaskResumeAll>
 8000c6c:	e77a      	b.n	8000b64 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c6e:	6a38      	ldr	r0, [r7, #32]
 8000c70:	f000 f8a0 	bl	8000db4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c74:	f000 fce4 	bl	8001640 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c78:	6a38      	ldr	r0, [r7, #32]
 8000c7a:	f000 f8ed 	bl	8000e58 <prvIsQueueEmpty>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f43f af6f 	beq.w	8000b64 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000c86:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	e000ed04 	.word	0xe000ed04

08000c94 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10d      	bne.n	8000cce <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 f8f0 	bl	8001ea4 <xTaskPriorityDisinherit>
 8000cc4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	e043      	b.n	8000d56 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d119      	bne.n	8000d08 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6858      	ldr	r0, [r3, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	f001 fa34 	bl	800214c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	441a      	add	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d32b      	bcc.n	8000d56 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	e026      	b.n	8000d56 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	68d8      	ldr	r0, [r3, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	461a      	mov	r2, r3
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	f001 fa1a 	bl	800214c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	425b      	negs	r3, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	441a      	add	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d105      	bne.n	8000d56 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d5e:	697b      	ldr	r3, [r7, #20]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d018      	beq.n	8000dac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	441a      	add	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d303      	bcc.n	8000d9c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68d9      	ldr	r1, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	461a      	mov	r2, r3
 8000da6:	6838      	ldr	r0, [r7, #0]
 8000da8:	f001 f9d0 	bl	800214c <memcpy>
    }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000dbc:	f7ff fcae 	bl	800071c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dc6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dc8:	e011      	b.n	8000dee <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d012      	beq.n	8000df8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3324      	adds	r3, #36	; 0x24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fe80 	bl	8001adc <xTaskRemoveFromEventList>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000de2:	f000 ffa3 	bl	8001d2c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dce9      	bgt.n	8000dca <prvUnlockQueue+0x16>
 8000df6:	e000      	b.n	8000dfa <prvUnlockQueue+0x46>
                    break;
 8000df8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	22ff      	movs	r2, #255	; 0xff
 8000dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000e02:	f7ff fca5 	bl	8000750 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e06:	f7ff fc89 	bl	800071c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e10:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e12:	e011      	b.n	8000e38 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d012      	beq.n	8000e42 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3310      	adds	r3, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fe5b 	bl	8001adc <xTaskRemoveFromEventList>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e2c:	f000 ff7e 	bl	8001d2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	dce9      	bgt.n	8000e14 <prvUnlockQueue+0x60>
 8000e40:	e000      	b.n	8000e44 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e42:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	22ff      	movs	r2, #255	; 0xff
 8000e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e4c:	f7ff fc80 	bl	8000750 <vPortExitCritical>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e60:	f7ff fc5c 	bl	800071c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e001      	b.n	8000e76 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e76:	f7ff fc6b 	bl	8000750 <vPortExitCritical>

    return xReturn;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e8c:	f7ff fc46 	bl	800071c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d102      	bne.n	8000ea2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e001      	b.n	8000ea6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ea6:	f7ff fc53 	bl	8000750 <vPortExitCritical>

    return xReturn;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f93b 	bl	8000150 <pvPortMalloc>
 8000eda:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d013      	beq.n	8000f0a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ee2:	205c      	movs	r0, #92	; 0x5c
 8000ee4:	f7ff f934 	bl	8000150 <pvPortMalloc>
 8000ee8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000ef0:	225c      	movs	r2, #92	; 0x5c
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	69f8      	ldr	r0, [r7, #28]
 8000ef6:	f001 f8fc 	bl	80020f2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
 8000f00:	e005      	b.n	8000f0e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff f9c2 	bl	800028c <vPortFree>
 8000f08:	e001      	b.n	8000f0e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d013      	beq.n	8000f3c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f80e 	bl	8000f4c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f30:	69f8      	ldr	r0, [r7, #28]
 8000f32:	f000 f87b 	bl	800102c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	e002      	b.n	8000f42 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f42:	69bb      	ldr	r3, [r7, #24]
    }
 8000f44:	4618      	mov	r0, r3
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	461a      	mov	r2, r3
 8000f64:	21a5      	movs	r1, #165	; 0xa5
 8000f66:	f001 f8c4 	bl	80020f2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f74:	3b01      	subs	r3, #1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	f023 0307 	bic.w	r3, r3, #7
 8000f82:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d01e      	beq.n	8000fc8 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e012      	b.n	8000fb6 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	7819      	ldrb	r1, [r3, #0]
 8000f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3334      	adds	r3, #52	; 0x34
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d9e9      	bls.n	8000f90 <prvInitialiseNewTask+0x44>
 8000fbc:	e000      	b.n	8000fc0 <prvInitialiseNewTask+0x74>
            {
                break;
 8000fbe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d901      	bls.n	8000fd2 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	6a3a      	ldr	r2, [r7, #32]
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f9e5 	bl	80003b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fea:	3318      	adds	r3, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f9e0 	bl	80003b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	f1c3 0206 	rsb	r2, r3, #6
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	6938      	ldr	r0, [r7, #16]
 800100e:	f7ff faf9 	bl	8000604 <pxPortInitialiseStack>
 8001012:	4602      	mov	r2, r0
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001022:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001034:	f7ff fb72 	bl	800071c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001038:	4b40      	ldr	r3, [pc, #256]	; (800113c <prvAddNewTaskToReadyList+0x110>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a3f      	ldr	r2, [pc, #252]	; (800113c <prvAddNewTaskToReadyList+0x110>)
 8001040:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <prvAddNewTaskToReadyList+0x114>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800104a:	4a3d      	ldr	r2, [pc, #244]	; (8001140 <prvAddNewTaskToReadyList+0x114>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <prvAddNewTaskToReadyList+0x110>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d110      	bne.n	800107a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001058:	f000 fe8c 	bl	8001d74 <prvInitialiseTaskLists>
 800105c:	e00d      	b.n	800107a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <prvAddNewTaskToReadyList+0x118>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <prvAddNewTaskToReadyList+0x114>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	429a      	cmp	r2, r3
 8001072:	d802      	bhi.n	800107a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <prvAddNewTaskToReadyList+0x114>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <prvAddNewTaskToReadyList+0x11c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <prvAddNewTaskToReadyList+0x11c>)
 8001082:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <prvAddNewTaskToReadyList+0x11c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2201      	movs	r2, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <prvAddNewTaskToReadyList+0x120>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	4a2c      	ldr	r2, [pc, #176]	; (800114c <prvAddNewTaskToReadyList+0x120>)
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a2:	492b      	ldr	r1, [pc, #172]	; (8001150 <prvAddNewTaskToReadyList+0x124>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	3204      	adds	r2, #4
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1d1a      	adds	r2, r3, #4
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <prvAddNewTaskToReadyList+0x124>)
 80010e2:	441a      	add	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	4918      	ldr	r1, [pc, #96]	; (8001150 <prvAddNewTaskToReadyList+0x124>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1c59      	adds	r1, r3, #1
 80010fc:	4814      	ldr	r0, [pc, #80]	; (8001150 <prvAddNewTaskToReadyList+0x124>)
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4403      	add	r3, r0
 8001108:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800110a:	f7ff fb21 	bl	8000750 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <prvAddNewTaskToReadyList+0x118>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <prvAddNewTaskToReadyList+0x114>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <prvAddNewTaskToReadyList+0x128>)
 8001126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20002930 	.word	0x20002930
 8001140:	20002844 	.word	0x20002844
 8001144:	2000293c 	.word	0x2000293c
 8001148:	2000294c 	.word	0x2000294c
 800114c:	20002938 	.word	0x20002938
 8001150:	20002848 	.word	0x20002848
 8001154:	e000ed04 	.word	0xe000ed04

08001158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800116a:	f000 fa5b 	bl	8001624 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800116e:	2100      	movs	r1, #0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 ff19 	bl	8001fa8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001176:	f000 fa63 	bl	8001640 <xTaskResumeAll>
 800117a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <vTaskDelay+0x44>)
 8001184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000ed04 	.word	0xe000ed04

080011a0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80011a8:	f7ff fab8 	bl	800071c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <uxTaskPriorityGet+0x18>
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <uxTaskPriorityGet+0x30>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e000      	b.n	80011ba <uxTaskPriorityGet+0x1a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c0:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80011c2:	f7ff fac5 	bl	8000750 <vPortExitCritical>

        return uxReturn;
 80011c6:	68bb      	ldr	r3, [r7, #8]
    }
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20002844 	.word	0x20002844

080011d4 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d901      	bls.n	80011ec <vTaskPrioritySet+0x18>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011e8:	2305      	movs	r3, #5
 80011ea:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80011ec:	f7ff fa96 	bl	800071c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <vTaskPrioritySet+0x28>
 80011f6:	4b55      	ldr	r3, [pc, #340]	; (800134c <vTaskPrioritySet+0x178>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	e000      	b.n	80011fe <vTaskPrioritySet+0x2a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	f000 8098 	beq.w	8001340 <vTaskPrioritySet+0x16c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	d90d      	bls.n	8001234 <vTaskPrioritySet+0x60>
                {
                    if( pxTCB != pxCurrentTCB )
 8001218:	4b4c      	ldr	r3, [pc, #304]	; (800134c <vTaskPrioritySet+0x178>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	429a      	cmp	r2, r3
 8001220:	d00f      	beq.n	8001242 <vTaskPrioritySet+0x6e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <vTaskPrioritySet+0x178>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d309      	bcc.n	8001242 <vTaskPrioritySet+0x6e>
                        {
                            xYieldRequired = pdTRUE;
 800122e:	2301      	movs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e006      	b.n	8001242 <vTaskPrioritySet+0x6e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <vTaskPrioritySet+0x178>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	429a      	cmp	r2, r3
 800123c:	d101      	bne.n	8001242 <vTaskPrioritySet+0x6e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d102      	bne.n	800125a <vTaskPrioritySet+0x86>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db04      	blt.n	8001272 <vTaskPrioritySet+0x9e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f1c3 0206 	rsb	r2, r3, #6
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6959      	ldr	r1, [r3, #20]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <vTaskPrioritySet+0x17c>)
 8001282:	4413      	add	r3, r2
 8001284:	4299      	cmp	r1, r3
 8001286:	d150      	bne.n	800132a <vTaskPrioritySet+0x156>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	3304      	adds	r3, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8f7 	bl	8000480 <uxListRemove>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <vTaskPrioritySet+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001298:	2201      	movs	r2, #1
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <vTaskPrioritySet+0x180>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4013      	ands	r3, r2
 80012a8:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <vTaskPrioritySet+0x180>)
 80012aa:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <vTaskPrioritySet+0x180>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <vTaskPrioritySet+0x180>)
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c2:	4923      	ldr	r1, [pc, #140]	; (8001350 <vTaskPrioritySet+0x17c>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3304      	adds	r3, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	3204      	adds	r2, #4
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <vTaskPrioritySet+0x17c>)
 8001302:	441a      	add	r2, r3
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130c:	4910      	ldr	r1, [pc, #64]	; (8001350 <vTaskPrioritySet+0x17c>)
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <vTaskPrioritySet+0x17c>)
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4403      	add	r3, r0
 8001328:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <vTaskPrioritySet+0x16c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <vTaskPrioritySet+0x184>)
 8001332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8001340:	f7ff fa06 	bl	8000750 <vPortExitCritical>
    }
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20002844 	.word	0x20002844
 8001350:	20002848 	.word	0x20002848
 8001354:	20002938 	.word	0x20002938
 8001358:	e000ed04 	.word	0xe000ed04

0800135c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001364:	f7ff f9da 	bl	800071c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <vTaskSuspend+0x18>
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <vTaskSuspend+0x100>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e000      	b.n	8001376 <vTaskSuspend+0x1a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3304      	adds	r3, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f87f 	bl	8000480 <uxListRemove>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d115      	bne.n	80013b4 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	4934      	ldr	r1, [pc, #208]	; (8001460 <vTaskSuspend+0x104>)
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10a      	bne.n	80013b4 <vTaskSuspend+0x58>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	2201      	movs	r2, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43da      	mvns	r2, r3
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <vTaskSuspend+0x108>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4013      	ands	r3, r2
 80013b0:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <vTaskSuspend+0x108>)
 80013b2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3318      	adds	r3, #24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f85d 	bl	8000480 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3304      	adds	r3, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4826      	ldr	r0, [pc, #152]	; (8001468 <vTaskSuspend+0x10c>)
 80013ce:	f7fe fffc 	bl	80003ca <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e010      	b.n	80013fa <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	3358      	adds	r3, #88	; 0x58
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	3358      	adds	r3, #88	; 0x58
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	ddeb      	ble.n	80013d8 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8001400:	f7ff f9a6 	bl	8000750 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <vTaskSuspend+0x110>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800140c:	f7ff f986 	bl	800071c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8001410:	f000 fd2e 	bl	8001e70 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8001414:	f7ff f99c 	bl	8000750 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <vTaskSuspend+0x100>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	429a      	cmp	r2, r3
 8001420:	d118      	bne.n	8001454 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <vTaskSuspend+0x110>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <vTaskSuspend+0x114>)
 800142c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800143a:	e00b      	b.n	8001454 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <vTaskSuspend+0x10c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <vTaskSuspend+0x118>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d103      	bne.n	8001450 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <vTaskSuspend+0x100>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    }
 800144e:	e001      	b.n	8001454 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8001450:	f000 fae8 	bl	8001a24 <vTaskSwitchContext>
    }
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20002844 	.word	0x20002844
 8001460:	20002848 	.word	0x20002848
 8001464:	20002938 	.word	0x20002938
 8001468:	2000291c 	.word	0x2000291c
 800146c:	2000293c 	.word	0x2000293c
 8001470:	e000ed04 	.word	0xe000ed04
 8001474:	20002930 	.word	0x20002930

08001478 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <prvTaskIsTaskSuspended+0x3c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10a      	bne.n	80014a8 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <prvTaskIsTaskSuspended+0x40>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d005      	beq.n	80014a8 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80014a8:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	2000291c 	.word	0x2000291c
 80014b8:	200028f0 	.word	0x200028f0

080014bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <vTaskResume+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d05f      	beq.n	8001592 <vTaskResume+0xd6>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05c      	beq.n	8001592 <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 80014d8:	f7ff f920 	bl	800071c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff ffcb 	bl	8001478 <prvTaskIsTaskSuspended>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d052      	beq.n	800158e <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3304      	adds	r3, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffc7 	bl	8000480 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	2201      	movs	r2, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <vTaskResume+0xe4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4313      	orrs	r3, r2
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <vTaskResume+0xe4>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	4926      	ldr	r1, [pc, #152]	; (80015a4 <vTaskResume+0xe8>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	3204      	adds	r2, #4
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <vTaskResume+0xe8>)
 8001548:	441a      	add	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001552:	4914      	ldr	r1, [pc, #80]	; (80015a4 <vTaskResume+0xe8>)
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c59      	adds	r1, r3, #1
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <vTaskResume+0xe8>)
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4403      	add	r3, r0
 800156e:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <vTaskResume+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	429a      	cmp	r2, r3
 800157c:	d307      	bcc.n	800158e <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <vTaskResume+0xec>)
 8001580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800158e:	f7ff f8df 	bl	8000750 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20002844 	.word	0x20002844
 80015a0:	20002938 	.word	0x20002938
 80015a4:	20002848 	.word	0x20002848
 80015a8:	e000ed04 	.word	0xe000ed04

080015ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <vTaskStartScheduler+0x5c>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2300      	movs	r3, #0
 80015bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015c0:	4912      	ldr	r1, [pc, #72]	; (800160c <vTaskStartScheduler+0x60>)
 80015c2:	4813      	ldr	r0, [pc, #76]	; (8001610 <vTaskStartScheduler+0x64>)
 80015c4:	f7ff fc7c 	bl	8000ec0 <xTaskCreate>
 80015c8:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d115      	bne.n	80015fc <vTaskStartScheduler+0x50>
        __asm volatile
 80015d0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80015d4:	f383 8811 	msr	BASEPRI, r3
 80015d8:	f3bf 8f6f 	isb	sy
 80015dc:	f3bf 8f4f 	dsb	sy
 80015e0:	603b      	str	r3, [r7, #0]
    }
 80015e2:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <vTaskStartScheduler+0x68>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <vTaskStartScheduler+0x6c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <vTaskStartScheduler+0x70>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80015f8:	f7ff f870 	bl	80006dc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <vTaskStartScheduler+0x74>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20002954 	.word	0x20002954
 800160c:	080021a0 	.word	0x080021a0
 8001610:	08001d45 	.word	0x08001d45
 8001614:	20002950 	.word	0x20002950
 8001618:	2000293c 	.word	0x2000293c
 800161c:	20002934 	.word	0x20002934
 8001620:	20000008 	.word	0x20000008

08001624 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <vTaskSuspendAll+0x18>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a03      	ldr	r2, [pc, #12]	; (800163c <vTaskSuspendAll+0x18>)
 8001630:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20002958 	.word	0x20002958

08001640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800164e:	f7ff f865 	bl	800071c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001652:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <xTaskResumeAll+0x1b4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	4a66      	ldr	r2, [pc, #408]	; (80017f4 <xTaskResumeAll+0x1b4>)
 800165a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <xTaskResumeAll+0x1b4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 80c0 	bne.w	80017e6 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001666:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <xTaskResumeAll+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80bb 	beq.w	80017e6 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001670:	e08a      	b.n	8001788 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001672:	4b62      	ldr	r3, [pc, #392]	; (80017fc <xTaskResumeAll+0x1bc>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6a12      	ldr	r2, [r2, #32]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	69d2      	ldr	r2, [r2, #28]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3318      	adds	r3, #24
 800169c:	429a      	cmp	r2, r3
 800169e:	d103      	bne.n	80016a8 <xTaskResumeAll+0x68>
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	6892      	ldr	r2, [r2, #8]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3304      	adds	r3, #4
 80016da:	429a      	cmp	r2, r3
 80016dc:	d103      	bne.n	80016e6 <xTaskResumeAll+0xa6>
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	2201      	movs	r2, #1
 80016fc:	409a      	lsls	r2, r3
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <xTaskResumeAll+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	4a3e      	ldr	r2, [pc, #248]	; (8001800 <xTaskResumeAll+0x1c0>)
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	493d      	ldr	r1, [pc, #244]	; (8001804 <xTaskResumeAll+0x1c4>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	3204      	adds	r2, #4
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1d1a      	adds	r2, r3, #4
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <xTaskResumeAll+0x1c4>)
 800174c:	441a      	add	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	492b      	ldr	r1, [pc, #172]	; (8001804 <xTaskResumeAll+0x1c4>)
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	4827      	ldr	r0, [pc, #156]	; (8001804 <xTaskResumeAll+0x1c4>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <xTaskResumeAll+0x1c8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <xTaskResumeAll+0x1cc>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <xTaskResumeAll+0x1bc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f47f af70 	bne.w	8001672 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001798:	f000 fb6a 	bl	8001e70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <xTaskResumeAll+0x1d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d010      	beq.n	80017ca <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80017a8:	f000 f836 	bl	8001818 <xTaskIncrementTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <xTaskResumeAll+0x1cc>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f1      	bne.n	80017a8 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <xTaskResumeAll+0x1d0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <xTaskResumeAll+0x1cc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <xTaskResumeAll+0x1d4>)
 80017d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80017e6:	f7fe ffb3 	bl	8000750 <vPortExitCritical>

    return xAlreadyYielded;
 80017ea:	693b      	ldr	r3, [r7, #16]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20002958 	.word	0x20002958
 80017f8:	20002930 	.word	0x20002930
 80017fc:	200028f0 	.word	0x200028f0
 8001800:	20002938 	.word	0x20002938
 8001804:	20002848 	.word	0x20002848
 8001808:	20002844 	.word	0x20002844
 800180c:	20002944 	.word	0x20002944
 8001810:	20002940 	.word	0x20002940
 8001814:	e000ed04 	.word	0xe000ed04

08001818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001822:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <xTaskIncrementTick+0x1e0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 80dc 	bne.w	80019e4 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <xTaskIncrementTick+0x1e4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001834:	4a71      	ldr	r2, [pc, #452]	; (80019fc <xTaskIncrementTick+0x1e4>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d110      	bne.n	8001862 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001840:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <xTaskIncrementTick+0x1e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <xTaskIncrementTick+0x1ec>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6d      	ldr	r2, [pc, #436]	; (8001a00 <xTaskIncrementTick+0x1e8>)
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4a6d      	ldr	r2, [pc, #436]	; (8001a04 <xTaskIncrementTick+0x1ec>)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <xTaskIncrementTick+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <xTaskIncrementTick+0x1f0>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	f000 fb07 	bl	8001e70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <xTaskIncrementTick+0x1f4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	429a      	cmp	r2, r3
 800186a:	f0c0 80a6 	bcc.w	80019ba <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <xTaskIncrementTick+0x1e8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d104      	bne.n	8001882 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <xTaskIncrementTick+0x1f4>)
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	601a      	str	r2, [r3, #0]
                    break;
 8001880:	e09b      	b.n	80019ba <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <xTaskIncrementTick+0x1e8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	429a      	cmp	r2, r3
 8001898:	d203      	bcs.n	80018a2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <xTaskIncrementTick+0x1f4>)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80018a0:	e08b      	b.n	80019ba <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68d2      	ldr	r2, [r2, #12]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	6892      	ldr	r2, [r2, #8]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	3304      	adds	r3, #4
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d103      	bne.n	80018d0 <xTaskIncrementTick+0xb8>
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1e5a      	subs	r2, r3, #1
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01e      	beq.n	8001926 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	6a12      	ldr	r2, [r2, #32]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	69d2      	ldr	r2, [r2, #28]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3318      	adds	r3, #24
 800190a:	429a      	cmp	r2, r3
 800190c:	d103      	bne.n	8001916 <xTaskIncrementTick+0xfe>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	2201      	movs	r2, #1
 800192c:	409a      	lsls	r2, r3
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <xTaskIncrementTick+0x1f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <xTaskIncrementTick+0x1f8>)
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193c:	4935      	ldr	r1, [pc, #212]	; (8001a14 <xTaskIncrementTick+0x1fc>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3304      	adds	r3, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	3204      	adds	r2, #4
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1d1a      	adds	r2, r3, #4
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <xTaskIncrementTick+0x1fc>)
 800197c:	441a      	add	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001986:	4923      	ldr	r1, [pc, #140]	; (8001a14 <xTaskIncrementTick+0x1fc>)
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	481f      	ldr	r0, [pc, #124]	; (8001a14 <xTaskIncrementTick+0x1fc>)
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4403      	add	r3, r0
 80019a2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <xTaskIncrementTick+0x200>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f67f af5d 	bls.w	800186e <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019b8:	e759      	b.n	800186e <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <xTaskIncrementTick+0x200>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c0:	4914      	ldr	r1, [pc, #80]	; (8001a14 <xTaskIncrementTick+0x1fc>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d901      	bls.n	80019d6 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <xTaskIncrementTick+0x204>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e004      	b.n	80019ee <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <xTaskIncrementTick+0x208>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <xTaskIncrementTick+0x208>)
 80019ec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80019ee:	69fb      	ldr	r3, [r7, #28]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20002958 	.word	0x20002958
 80019fc:	20002934 	.word	0x20002934
 8001a00:	200028e8 	.word	0x200028e8
 8001a04:	200028ec 	.word	0x200028ec
 8001a08:	20002948 	.word	0x20002948
 8001a0c:	20002950 	.word	0x20002950
 8001a10:	20002938 	.word	0x20002938
 8001a14:	20002848 	.word	0x20002848
 8001a18:	20002844 	.word	0x20002844
 8001a1c:	20002944 	.word	0x20002944
 8001a20:	20002940 	.word	0x20002940

08001a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <vTaskSwitchContext+0x78>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <vTaskSwitchContext+0x7c>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001a38:	e02a      	b.n	8001a90 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <vTaskSwitchContext+0x7c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <vTaskSwitchContext+0x80>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f1c3 031f 	rsb	r3, r3, #31
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <vTaskSwitchContext+0x84>)
 8001a62:	4413      	add	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3308      	adds	r3, #8
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d104      	bne.n	8001a86 <vTaskSwitchContext+0x62>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <vTaskSwitchContext+0x88>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20002958 	.word	0x20002958
 8001aa0:	20002944 	.word	0x20002944
 8001aa4:	20002938 	.word	0x20002938
 8001aa8:	20002848 	.word	0x20002848
 8001aac:	20002844 	.word	0x20002844

08001ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <vTaskPlaceOnEventList+0x28>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fca4 	bl	8000410 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ac8:	2101      	movs	r1, #1
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f000 fa6c 	bl	8001fa8 <prvAddCurrentTaskToDelayedList>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20002844 	.word	0x20002844

08001adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	6a12      	ldr	r2, [r2, #32]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	69d2      	ldr	r2, [r2, #28]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d103      	bne.n	8001b1a <xTaskRemoveFromEventList+0x3e>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <xTaskRemoveFromEventList+0x178>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15e      	bne.n	8001bf0 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	68d2      	ldr	r2, [r2, #12]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	6892      	ldr	r2, [r2, #8]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	3304      	adds	r3, #4
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d103      	bne.n	8001b60 <xTaskRemoveFromEventList+0x84>
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	2201      	movs	r2, #1
 8001b76:	409a      	lsls	r2, r3
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <xTaskRemoveFromEventList+0x17c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	4a36      	ldr	r2, [pc, #216]	; (8001c58 <xTaskRemoveFromEventList+0x17c>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	4935      	ldr	r1, [pc, #212]	; (8001c5c <xTaskRemoveFromEventList+0x180>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3304      	adds	r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	3204      	adds	r2, #4
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <xTaskRemoveFromEventList+0x180>)
 8001bc6:	441a      	add	r2, r3
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	4922      	ldr	r1, [pc, #136]	; (8001c5c <xTaskRemoveFromEventList+0x180>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	481e      	ldr	r0, [pc, #120]	; (8001c5c <xTaskRemoveFromEventList+0x180>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4403      	add	r3, r0
 8001bec:	6019      	str	r1, [r3, #0]
 8001bee:	e01b      	b.n	8001c28 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <xTaskRemoveFromEventList+0x184>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	61da      	str	r2, [r3, #28]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	621a      	str	r2, [r3, #32]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	3218      	adds	r2, #24
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f103 0218 	add.w	r2, r3, #24
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <xTaskRemoveFromEventList+0x184>)
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <xTaskRemoveFromEventList+0x184>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <xTaskRemoveFromEventList+0x184>)
 8001c26:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <xTaskRemoveFromEventList+0x188>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d905      	bls.n	8001c42 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <xTaskRemoveFromEventList+0x18c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e001      	b.n	8001c46 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001c46:	69fb      	ldr	r3, [r7, #28]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3724      	adds	r7, #36	; 0x24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20002958 	.word	0x20002958
 8001c58:	20002938 	.word	0x20002938
 8001c5c:	20002848 	.word	0x20002848
 8001c60:	200028f0 	.word	0x200028f0
 8001c64:	20002844 	.word	0x20002844
 8001c68:	20002944 	.word	0x20002944

08001c6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <vTaskInternalSetTimeOutState+0x24>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vTaskInternalSetTimeOutState+0x28>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20002948 	.word	0x20002948
 8001c94:	20002934 	.word	0x20002934

08001c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8001ca2:	f7fe fd3b 	bl	800071c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <xTaskCheckForTimeOut+0x8c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d102      	bne.n	8001cc6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e026      	b.n	8001d14 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <xTaskCheckForTimeOut+0x90>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d00a      	beq.n	8001ce8 <xTaskCheckForTimeOut+0x50>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d305      	bcc.n	8001ce8 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e015      	b.n	8001d14 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d20b      	bcs.n	8001d0a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffb4 	bl	8001c6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e004      	b.n	8001d14 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001d14:	f7fe fd1c 	bl	8000750 <vPortExitCritical>

    return xReturn;
 8001d18:	697b      	ldr	r3, [r7, #20]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20002934 	.word	0x20002934
 8001d28:	20002948 	.word	0x20002948

08001d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <vTaskMissedYield+0x14>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20002944 	.word	0x20002944

08001d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d4c:	f000 f852 	bl	8001df4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <prvIdleTask+0x28>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d9f9      	bls.n	8001d4c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <prvIdleTask+0x2c>)
 8001d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001d68:	e7f0      	b.n	8001d4c <prvIdleTask+0x8>
 8001d6a:	bf00      	nop
 8001d6c:	20002848 	.word	0x20002848
 8001d70:	e000ed04 	.word	0xe000ed04

08001d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	e00c      	b.n	8001d9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <prvInitialiseTaskLists+0x60>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe faf0 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d9ef      	bls.n	8001d80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <prvInitialiseTaskLists+0x64>)
 8001da2:	f7fe fae7 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <prvInitialiseTaskLists+0x68>)
 8001da8:	f7fe fae4 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <prvInitialiseTaskLists+0x6c>)
 8001dae:	f7fe fae1 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001db2:	480c      	ldr	r0, [pc, #48]	; (8001de4 <prvInitialiseTaskLists+0x70>)
 8001db4:	f7fe fade 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <prvInitialiseTaskLists+0x74>)
 8001dba:	f7fe fadb 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <prvInitialiseTaskLists+0x78>)
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <prvInitialiseTaskLists+0x64>)
 8001dc2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <prvInitialiseTaskLists+0x7c>)
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <prvInitialiseTaskLists+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20002848 	.word	0x20002848
 8001dd8:	200028c0 	.word	0x200028c0
 8001ddc:	200028d4 	.word	0x200028d4
 8001de0:	200028f0 	.word	0x200028f0
 8001de4:	20002904 	.word	0x20002904
 8001de8:	2000291c 	.word	0x2000291c
 8001dec:	200028e8 	.word	0x200028e8
 8001df0:	200028ec 	.word	0x200028ec

08001df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dfa:	e019      	b.n	8001e30 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001dfc:	f7fe fc8e 	bl	800071c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <prvCheckTasksWaitingTermination+0x50>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb37 	bl	8000480 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <prvCheckTasksWaitingTermination+0x54>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <prvCheckTasksWaitingTermination+0x54>)
 8001e1a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <prvCheckTasksWaitingTermination+0x58>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <prvCheckTasksWaitingTermination+0x58>)
 8001e24:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001e26:	f7fe fc93 	bl	8000750 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f810 	bl	8001e50 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <prvCheckTasksWaitingTermination+0x58>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e1      	bne.n	8001dfc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20002904 	.word	0x20002904
 8001e48:	20002930 	.word	0x20002930
 8001e4c:	20002918 	.word	0x20002918

08001e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fa15 	bl	800028c <vPortFree>
            vPortFree( pxTCB );
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fa12 	bl	800028c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <prvResetNextTaskUnblockTime+0x2c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <prvResetNextTaskUnblockTime+0x30>)
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e86:	e005      	b.n	8001e94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <prvResetNextTaskUnblockTime+0x2c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <prvResetNextTaskUnblockTime+0x30>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	200028e8 	.word	0x200028e8
 8001ea0:	20002950 	.word	0x20002950

08001ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06c      	beq.n	8001f94 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d061      	beq.n	8001f94 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d15d      	bne.n	8001f94 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe facf 	bl	8000480 <uxListRemove>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2201      	movs	r2, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <xTaskPriorityDisinherit+0xfc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <xTaskPriorityDisinherit+0xfc>)
 8001efc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f1c3 0206 	rsb	r2, r3, #6
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	2201      	movs	r2, #1
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <xTaskPriorityDisinherit+0xfc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <xTaskPriorityDisinherit+0xfc>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	491e      	ldr	r1, [pc, #120]	; (8001fa4 <xTaskPriorityDisinherit+0x100>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	3204      	adds	r2, #4
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <xTaskPriorityDisinherit+0x100>)
 8001f68:	441a      	add	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	615a      	str	r2, [r3, #20]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <xTaskPriorityDisinherit+0x100>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1c59      	adds	r1, r3, #1
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <xTaskPriorityDisinherit+0x100>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f94:	697b      	ldr	r3, [r7, #20]
    }
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20002938 	.word	0x20002938
 8001fa4:	20002848 	.word	0x20002848

08001fa8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa5e 	bl	8000480 <uxListRemove>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10b      	bne.n	8001fe2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <prvAddCurrentTaskToDelayedList+0xec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <prvAddCurrentTaskToDelayedList+0xec>)
 8001fe0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d124      	bne.n	8002034 <prvAddCurrentTaskToDelayedList+0x8c>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d021      	beq.n	8002034 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	6892      	ldr	r2, [r2, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	3204      	adds	r2, #4
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <prvAddCurrentTaskToDelayedList+0xf0>)
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002032:	e026      	b.n	8002082 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d209      	bcs.n	8002060 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <prvAddCurrentTaskToDelayedList+0xf4>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3304      	adds	r3, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe f9d9 	bl	8000410 <vListInsert>
}
 800205e:	e010      	b.n	8002082 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3304      	adds	r3, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f7fe f9cf 	bl	8000410 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d202      	bcs.n	8002082 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20002934 	.word	0x20002934
 8002090:	20002844 	.word	0x20002844
 8002094:	20002938 	.word	0x20002938
 8002098:	2000291c 	.word	0x2000291c
 800209c:	200028ec 	.word	0x200028ec
 80020a0:	200028e8 	.word	0x200028e8
 80020a4:	20002950 	.word	0x20002950

080020a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a8:	f7fe ff04 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ac:	480b      	ldr	r0, [pc, #44]	; (80020dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ae:	490c      	ldr	r1, [pc, #48]	; (80020e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020c4:	4c09      	ldr	r4, [pc, #36]	; (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d2:	f000 f817 	bl	8002104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d6:	f7fe fa61 	bl	800059c <main>
  bx lr
 80020da:	4770      	bx	lr
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020e4:	080021b0 	.word	0x080021b0
  ldr r2, =_sbss
 80020e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020ec:	2000295c 	.word	0x2000295c

080020f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC1_2_IRQHandler>

080020f2 <memset>:
 80020f2:	4603      	mov	r3, r0
 80020f4:	4402      	add	r2, r0
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d100      	bne.n	80020fc <memset+0xa>
 80020fa:	4770      	bx	lr
 80020fc:	f803 1b01 	strb.w	r1, [r3], #1
 8002100:	e7f9      	b.n	80020f6 <memset+0x4>
	...

08002104 <__libc_init_array>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	2600      	movs	r6, #0
 8002108:	4d0c      	ldr	r5, [pc, #48]	; (800213c <__libc_init_array+0x38>)
 800210a:	4c0d      	ldr	r4, [pc, #52]	; (8002140 <__libc_init_array+0x3c>)
 800210c:	1b64      	subs	r4, r4, r5
 800210e:	10a4      	asrs	r4, r4, #2
 8002110:	42a6      	cmp	r6, r4
 8002112:	d109      	bne.n	8002128 <__libc_init_array+0x24>
 8002114:	f000 f828 	bl	8002168 <_init>
 8002118:	2600      	movs	r6, #0
 800211a:	4d0a      	ldr	r5, [pc, #40]	; (8002144 <__libc_init_array+0x40>)
 800211c:	4c0a      	ldr	r4, [pc, #40]	; (8002148 <__libc_init_array+0x44>)
 800211e:	1b64      	subs	r4, r4, r5
 8002120:	10a4      	asrs	r4, r4, #2
 8002122:	42a6      	cmp	r6, r4
 8002124:	d105      	bne.n	8002132 <__libc_init_array+0x2e>
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	f855 3b04 	ldr.w	r3, [r5], #4
 800212c:	4798      	blx	r3
 800212e:	3601      	adds	r6, #1
 8002130:	e7ee      	b.n	8002110 <__libc_init_array+0xc>
 8002132:	f855 3b04 	ldr.w	r3, [r5], #4
 8002136:	4798      	blx	r3
 8002138:	3601      	adds	r6, #1
 800213a:	e7f2      	b.n	8002122 <__libc_init_array+0x1e>
 800213c:	080021a8 	.word	0x080021a8
 8002140:	080021a8 	.word	0x080021a8
 8002144:	080021a8 	.word	0x080021a8
 8002148:	080021ac 	.word	0x080021ac

0800214c <memcpy>:
 800214c:	440a      	add	r2, r1
 800214e:	4291      	cmp	r1, r2
 8002150:	f100 33ff 	add.w	r3, r0, #4294967295
 8002154:	d100      	bne.n	8002158 <memcpy+0xc>
 8002156:	4770      	bx	lr
 8002158:	b510      	push	{r4, lr}
 800215a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800215e:	4291      	cmp	r1, r2
 8002160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002164:	d1f9      	bne.n	800215a <memcpy+0xe>
 8002166:	bd10      	pop	{r4, pc}

08002168 <_init>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	bf00      	nop
 800216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216e:	bc08      	pop	{r3}
 8002170:	469e      	mov	lr, r3
 8002172:	4770      	bx	lr

08002174 <_fini>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	bf00      	nop
 8002178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217a:	bc08      	pop	{r3}
 800217c:	469e      	mov	lr, r3
 800217e:	4770      	bx	lr
