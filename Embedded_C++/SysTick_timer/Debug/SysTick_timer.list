
SysTick_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800031c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000320  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000320  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d6b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a7  00000000  00000000  00020ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015408  00000000  00000000  000216b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002673  00000000  00000000  00036abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b165  00000000  00000000  0003912e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000055c  00000000  00000000  000b4294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b47f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002fc 	.word	0x080002fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002fc 	.word	0x080002fc

0800014c <SystickInitialize>:
static volatile uint32_t Ticks;



void SystickInitialize()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//Update system Clock value
	SysTick->LOAD = (OSC / MILLIS_IN_SEC) - 1;
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <SystickInitialize+0x1c>)
 8000152:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000156:	605a      	str	r2, [r3, #4]

	// Configure the SysTick timer to overflow every 1 us
	// SysTick->CTRL = (1 << 0) | (1 << 1) | (1 << 2);
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8000158:	4b03      	ldr	r3, [pc, #12]	; (8000168 <SystickInitialize+0x1c>)
 800015a:	2207      	movs	r2, #7
 800015c:	601a      	str	r2, [r3, #0]
}
 800015e:	bf00      	nop
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	e000e010 	.word	0xe000e010

0800016c <DelayInit>:

void DelayInit()
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	SystickInitialize();
 8000170:	f7ff ffec 	bl	800014c <SystickInitialize>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}

08000178 <DelayMs>:

void DelayMs(uint32_t ms)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	Ticks = ms;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <DelayMs+0x24>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6013      	str	r3, [r2, #0]
	while(Ticks);
 8000186:	bf00      	nop
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <DelayMs+0x24>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1fb      	bne.n	8000188 <DelayMs+0x10>
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000020 	.word	0x20000020

080001a0 <main>:
#include "delay.h"

unsigned int counter;

int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	RCC->APB2ENR = (1 << 4); //Enable GPIOC
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <main+0x40>)
 80001a6:	2210      	movs	r2, #16
 80001a8:	619a      	str	r2, [r3, #24]
	GPIOC->CRH = 0x33333333;
 80001aa:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <main+0x44>)
 80001ac:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80001b0:	605a      	str	r2, [r3, #4]
	DelayInit();
 80001b2:	f7ff ffdb 	bl	800016c <DelayInit>

  while (1)
  {
	  GPIOC->ODR &=~ (1 << 13);
 80001b6:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <main+0x44>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <main+0x44>)
 80001bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001c0:	60d3      	str	r3, [r2, #12]
	  DelayMs(1000);
 80001c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c6:	f7ff ffd7 	bl	8000178 <DelayMs>
	  GPIOC->ODR |= (1 << 13);
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <main+0x44>)
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <main+0x44>)
 80001d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001d4:	60d3      	str	r3, [r2, #12]
	  DelayMs(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f7ff ffcd 	bl	8000178 <DelayMs>
	  GPIOC->ODR &=~ (1 << 13);
 80001de:	e7ea      	b.n	80001b6 <main+0x16>
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40011000 	.word	0x40011000

080001e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80001ec:	e7fe      	b.n	80001ec <NMI_Handler+0x4>

080001ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <HardFault_Handler+0x4>

080001f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <MemManage_Handler+0x4>

080001fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <BusFault_Handler+0x4>

08000200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000204:	e7fe      	b.n	8000204 <UsageFault_Handler+0x4>

08000206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000206:	b480      	push	{r7}
 8000208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr

0800021e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800022e:	f000 f82f 	bl	8000290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}

08000236 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000236:	b480      	push	{r7}
 8000238:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000244:	f7ff fff7 	bl	8000236 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800024a:	490c      	ldr	r1, [pc, #48]	; (800027c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800024c:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <LoopFillZerobss+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a09      	ldr	r2, [pc, #36]	; (8000284 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000260:	4c09      	ldr	r4, [pc, #36]	; (8000288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800026e:	f000 f821 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ff95 	bl	80001a0 <main>
  bx lr
 8000276:	4770      	bx	lr
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000280:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 8000284:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000288:	20000028 	.word	0x20000028

0800028c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_2_IRQHandler>
	...

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <HAL_IncTick+0x1c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <HAL_IncTick+0x20>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4413      	add	r3, r2
 80002a0:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <HAL_IncTick+0x20>)
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000024 	.word	0x20000024

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2600      	movs	r6, #0
 80002b8:	4d0c      	ldr	r5, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1b64      	subs	r4, r4, r5
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a6      	cmp	r6, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2600      	movs	r6, #0
 80002ca:	4d0a      	ldr	r5, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a6      	cmp	r6, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	3601      	adds	r6, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e6:	4798      	blx	r3
 80002e8:	3601      	adds	r6, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
