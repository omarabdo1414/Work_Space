
USART_OOP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005a8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005a8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f0c  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000062c  00000000  00000000  00020f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  000215a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000157  00000000  00000000  00021790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001538b  00000000  00000000  000218e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020c9  00000000  00000000  00036c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b975  00000000  00000000  00038d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000614  00000000  00000000  000b46b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b4cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	08000534 	.word	0x08000534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	08000534 	.word	0x08000534

08000150 <__aeabi_d2uiz>:
 8000150:	004a      	lsls	r2, r1, #1
 8000152:	d211      	bcs.n	8000178 <__aeabi_d2uiz+0x28>
 8000154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000158:	d211      	bcs.n	800017e <__aeabi_d2uiz+0x2e>
 800015a:	d50d      	bpl.n	8000178 <__aeabi_d2uiz+0x28>
 800015c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000164:	d40e      	bmi.n	8000184 <__aeabi_d2uiz+0x34>
 8000166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800016a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000172:	fa23 f002 	lsr.w	r0, r3, r2
 8000176:	4770      	bx	lr
 8000178:	f04f 0000 	mov.w	r0, #0
 800017c:	4770      	bx	lr
 800017e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000182:	d102      	bne.n	800018a <__aeabi_d2uiz+0x3a>
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	4770      	bx	lr
 800018a:	f04f 0000 	mov.w	r0, #0
 800018e:	4770      	bx	lr

08000190 <_ZN5UsartC1E5USART>:
};

class Usart
{
public:
	Usart(USART usart) // inject USART
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	6039      	str	r1, [r7, #0]
	{
		switch(usart)
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <_ZN5UsartC1E5USART+0x38>)
 800019e:	4293      	cmp	r3, r2
 80001a0:	d008      	beq.n	80001b4 <_ZN5UsartC1E5USART+0x24>
 80001a2:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <_ZN5UsartC1E5USART+0x38>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	dc0a      	bgt.n	80001be <_ZN5UsartC1E5USART+0x2e>
 80001a8:	4a08      	ldr	r2, [pc, #32]	; (80001cc <_ZN5UsartC1E5USART+0x3c>)
 80001aa:	4293      	cmp	r3, r2
 80001ac:	d006      	beq.n	80001bc <_ZN5UsartC1E5USART+0x2c>
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <_ZN5UsartC1E5USART+0x40>)
 80001b0:	4293      	cmp	r3, r2
		case USART2_Instance:
			//Initializing USART2
			break;
		case USART3_Instance:
			//Initializing USART3
			break;
 80001b2:	e004      	b.n	80001be <_ZN5UsartC1E5USART+0x2e>
			InitializeUSART1();
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f000 f80f 	bl	80001d8 <_ZN5Usart16InitializeUSART1Ev>
			break;
 80001ba:	e000      	b.n	80001be <_ZN5UsartC1E5USART+0x2e>
			break;
 80001bc:	bf00      	nop
		//set baud rate
		//set transmission and reception
		//Polling or Interrupt
		//Frame Size = 8;
		// Enable USART Module
	}
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40013800 	.word	0x40013800
 80001cc:	40004400 	.word	0x40004400
 80001d0:	40004800 	.word	0x40004800
 80001d4:	00000000 	.word	0x00000000

080001d8 <_ZN5Usart16InitializeUSART1Ev>:
	void InitializeUSART1()
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	{
		RCC->APB2ENR = (1 << 0) | (1 << 2) | (1 << 14);
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <_ZN5Usart16InitializeUSART1Ev+0x58>)
 80001e2:	f244 0205 	movw	r2, #16389	; 0x4005
 80001e6:	619a      	str	r2, [r3, #24]
		//PA9 to be output alternate function for USART Transmit
		GPIOA->CRH = (0x0B << 4); //  10 for alternate function 11 for mode so it is 1011 --> 0x0B in hex
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <_ZN5Usart16InitializeUSART1Ev+0x5c>)
 80001ea:	22b0      	movs	r2, #176	; 0xb0
 80001ec:	605a      	str	r2, [r3, #4]
		//PA10 to be input floating for USART receive
		GPIOA->CRH = (4 << 8);
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <_ZN5Usart16InitializeUSART1Ev+0x5c>)
 80001f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f4:	605a      	str	r2, [r3, #4]
		//Calculating the baud rate
		double USART_div = FOSC / BAUD;
 80001f6:	a30c      	add	r3, pc, #48	; (adr r3, 8000228 <_ZN5Usart16InitializeUSART1Ev+0x50>)
 80001f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		BRR = USART_div;
 8000200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000204:	f7ff ffa4 	bl	8000150 <__aeabi_d2uiz>
 8000208:	4602      	mov	r2, r0
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	609a      	str	r2, [r3, #8]
		//Enable Transmission and reception
		CR1  = (1 << 2) | (1 << 3);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	220c      	movs	r2, #12
 8000212:	60da      	str	r2, [r3, #12]
		CR1 |= (1 << 13); // UE
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	60da      	str	r2, [r3, #12]
	}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	408a0800 	.word	0x408a0800
 8000230:	40021000 	.word	0x40021000
 8000234:	40010800 	.word	0x40010800

08000238 <_ZN5UsartnwEj5USART>:
	void setFrameSize(FrameSize fsz)
	{
		CR1 = static_cast<uint32_t>(fsz);
	}
	void* operator new(size_t, USART instance)
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	{
		return reinterpret_cast<void*>(instance);
 8000242:	683b      	ldr	r3, [r7, #0]
	}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <_ZN5Usart8sendCharEc>:

	void sendChar(char data)
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	460b      	mov	r3, r1
 8000258:	70fb      	strb	r3, [r7, #3]
	{
		DR = data & 0xFF;
 800025a:	78fa      	ldrb	r2, [r7, #3]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	605a      	str	r2, [r3, #4]
		while(!(SR & (1 << 7)));
 8000260:	bf00      	nop
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026a:	2b00      	cmp	r3, #0
 800026c:	bf0c      	ite	eq
 800026e:	2301      	moveq	r3, #1
 8000270:	2300      	movne	r3, #0
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d1f4      	bne.n	8000262 <_ZN5Usart8sendCharEc+0x14>
	}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <_ZN5Usart4readEv>:

	char read()
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	{
		while(!(SR & (1 << 5)));
 800028c:	bf00      	nop
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	2b00      	cmp	r3, #0
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f4      	bne.n	800028e <_ZN5Usart4readEv+0xa>
		return DR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	b2db      	uxtb	r3, r3
	}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <_ZN5Usart10sendStringEPc>:

	void sendString(char *data)
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	{
		int i = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
		while(data[i] != '\0')
 80002c2:	e00a      	b.n	80002da <_ZN5Usart10sendStringEPc+0x26>
		{
			sendChar(data[i]);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ffbd 	bl	800024e <_ZN5Usart8sendCharEc>
			i++;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
		while(data[i] != '\0')
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1ee      	bne.n	80002c4 <_ZN5Usart10sendStringEPc+0x10>
		}
	}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_Z8Led_Initv>:

#include "usart.h"
void Led_Init()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	RCC->APB2ENR = (1 << 4);
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <_Z8Led_Initv+0x24>)
 80002f6:	2210      	movs	r2, #16
 80002f8:	619a      	str	r2, [r3, #24]
	GPIOC->CRH = (3 << 20);
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <_Z8Led_Initv+0x28>)
 80002fc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000300:	605a      	str	r2, [r3, #4]
	GPIOC->CRH = (3 << 24);
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <_Z8Led_Initv+0x28>)
 8000304:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000308:	605a      	str	r2, [r3, #4]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40011000 	.word	0x40011000

0800031c <main>:


int main(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
  Led_Init();
 8000322:	f7ff ffe5 	bl	80002f0 <_Z8Led_Initv>
  Usart *bleutooth = new(USART1_Instance) Usart(USART1_Instance);
 8000326:	4938      	ldr	r1, [pc, #224]	; (8000408 <main+0xec>)
 8000328:	201c      	movs	r0, #28
 800032a:	f7ff ff85 	bl	8000238 <_ZN5UsartnwEj5USART>
 800032e:	4604      	mov	r4, r0
 8000330:	4935      	ldr	r1, [pc, #212]	; (8000408 <main+0xec>)
 8000332:	4620      	mov	r0, r4
 8000334:	f7ff ff2c 	bl	8000190 <_ZN5UsartC1E5USART>
 8000338:	607c      	str	r4, [r7, #4]

  while (1)
  {
	  if(bleutooth->read() == 'W')
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ffa2 	bl	8000284 <_ZN5Usart4readEv>
 8000340:	4603      	mov	r3, r0
 8000342:	2b57      	cmp	r3, #87	; 0x57
 8000344:	bf0c      	ite	eq
 8000346:	2301      	moveq	r3, #1
 8000348:	2300      	movne	r3, #0
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b00      	cmp	r3, #0
 800034e:	d008      	beq.n	8000362 <main+0x46>
	    {
			  bleutooth->sendString("Front LED is ON\r\n");
 8000350:	492e      	ldr	r1, [pc, #184]	; (800040c <main+0xf0>)
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f7ff ffae 	bl	80002b4 <_ZN5Usart10sendStringEPc>
			  GPIOC->ODR = (1 << 13);
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <main+0xf4>)
 800035a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	e7eb      	b.n	800033a <main+0x1e>
	    }
	    else if(bleutooth->read() == 'w')
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff8e 	bl	8000284 <_ZN5Usart4readEv>
 8000368:	4603      	mov	r3, r0
 800036a:	2b77      	cmp	r3, #119	; 0x77
 800036c:	bf0c      	ite	eq
 800036e:	2301      	moveq	r3, #1
 8000370:	2300      	movne	r3, #0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d00a      	beq.n	800038e <main+0x72>
	    {
			  bleutooth->sendString("Front LED is OFF\r\n");
 8000378:	4926      	ldr	r1, [pc, #152]	; (8000414 <main+0xf8>)
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f7ff ff9a 	bl	80002b4 <_ZN5Usart10sendStringEPc>
			  GPIOC->ODR &= ~(1 << 13);
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <main+0xf4>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <main+0xf4>)
 8000386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800038a:	60d3      	str	r3, [r2, #12]
 800038c:	e7d5      	b.n	800033a <main+0x1e>
	    }
	    else if(bleutooth->read() == 'U')
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ff78 	bl	8000284 <_ZN5Usart4readEv>
 8000394:	4603      	mov	r3, r0
 8000396:	2b55      	cmp	r3, #85	; 0x55
 8000398:	bf0c      	ite	eq
 800039a:	2301      	moveq	r3, #1
 800039c:	2300      	movne	r3, #0
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00a      	beq.n	80003ba <main+0x9e>
	    {
	    	  bleutooth->sendString("Back LED is OFF\r\n");
 80003a4:	491c      	ldr	r1, [pc, #112]	; (8000418 <main+0xfc>)
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ff84 	bl	80002b4 <_ZN5Usart10sendStringEPc>
	    	  GPIOC->ODR &= ~(1 << 14);
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0xf4>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a17      	ldr	r2, [pc, #92]	; (8000410 <main+0xf4>)
 80003b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003b6:	60d3      	str	r3, [r2, #12]
 80003b8:	e7bf      	b.n	800033a <main+0x1e>
	    }
	    else if(bleutooth->read() == 'u')
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff62 	bl	8000284 <_ZN5Usart4readEv>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b75      	cmp	r3, #117	; 0x75
 80003c4:	bf0c      	ite	eq
 80003c6:	2301      	moveq	r3, #1
 80003c8:	2300      	movne	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00a      	beq.n	80003e6 <main+0xca>
	    {
	    	  bleutooth->sendString("Back LED is OFF\r\n");
 80003d0:	4911      	ldr	r1, [pc, #68]	; (8000418 <main+0xfc>)
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff ff6e 	bl	80002b4 <_ZN5Usart10sendStringEPc>
	    	  GPIOC->ODR &= ~(1 << 14);
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <main+0xf4>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <main+0xf4>)
 80003de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003e2:	60d3      	str	r3, [r2, #12]
 80003e4:	e7a9      	b.n	800033a <main+0x1e>
	    }
	    else
	    {
			  bleutooth->sendString("All LEDs are OFF\r\n");
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <main+0x100>)
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ff63 	bl	80002b4 <_ZN5Usart10sendStringEPc>
			  GPIOC->ODR &= ~(1 << 14);
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <main+0xf4>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <main+0xf4>)
 80003f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003f8:	60d3      	str	r3, [r2, #12]
			  GPIOC->ODR &= ~(1 << 13);
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <main+0xf4>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	4a04      	ldr	r2, [pc, #16]	; (8000410 <main+0xf4>)
 8000400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000404:	60d3      	str	r3, [r2, #12]
	  if(bleutooth->read() == 'W')
 8000406:	e798      	b.n	800033a <main+0x1e>
 8000408:	40013800 	.word	0x40013800
 800040c:	0800054c 	.word	0x0800054c
 8000410:	40011000 	.word	0x40011000
 8000414:	08000560 	.word	0x08000560
 8000418:	08000574 	.word	0x08000574
 800041c:	08000588 	.word	0x08000588

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000424:	e7fe      	b.n	8000424 <NMI_Handler+0x4>

08000426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042a:	e7fe      	b.n	800042a <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <MemManage_Handler+0x4>

08000432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <BusFault_Handler+0x4>

08000438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <UsageFault_Handler+0x4>

0800043e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000466:	f000 f82f 	bl	80004c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}

0800046e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
	...

0800047c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800047c:	f7ff fff7 	bl	800046e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000482:	490c      	ldr	r1, [pc, #48]	; (80004b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000498:	4c09      	ldr	r4, [pc, #36]	; (80004c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004a6:	f000 f821 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ff37 	bl	800031c <main>
  bx lr
 80004ae:	4770      	bx	lr
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b8:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 80004bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c0:	20000024 	.word	0x20000024

080004c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC1_2_IRQHandler>
	...

080004c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_IncTick+0x1c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_IncTick+0x20>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4413      	add	r3, r2
 80004d8:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <HAL_IncTick+0x20>)
 80004da:	6013      	str	r3, [r2, #0]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000020 	.word	0x20000020

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	2600      	movs	r6, #0
 80004f0:	4d0c      	ldr	r5, [pc, #48]	; (8000524 <__libc_init_array+0x38>)
 80004f2:	4c0d      	ldr	r4, [pc, #52]	; (8000528 <__libc_init_array+0x3c>)
 80004f4:	1b64      	subs	r4, r4, r5
 80004f6:	10a4      	asrs	r4, r4, #2
 80004f8:	42a6      	cmp	r6, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	f000 f81a 	bl	8000534 <_init>
 8000500:	2600      	movs	r6, #0
 8000502:	4d0a      	ldr	r5, [pc, #40]	; (800052c <__libc_init_array+0x40>)
 8000504:	4c0a      	ldr	r4, [pc, #40]	; (8000530 <__libc_init_array+0x44>)
 8000506:	1b64      	subs	r4, r4, r5
 8000508:	10a4      	asrs	r4, r4, #2
 800050a:	42a6      	cmp	r6, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f855 3b04 	ldr.w	r3, [r5], #4
 8000514:	4798      	blx	r3
 8000516:	3601      	adds	r6, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f855 3b04 	ldr.w	r3, [r5], #4
 800051e:	4798      	blx	r3
 8000520:	3601      	adds	r6, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	0800059c 	.word	0x0800059c
 8000528:	0800059c 	.word	0x0800059c
 800052c:	0800059c 	.word	0x0800059c
 8000530:	080005a0 	.word	0x080005a0

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
